{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u043d\u0438\u043a \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u0438, K33412","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33412","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u043d\u0438\u043a \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u0438, K33412"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket # UDP server server_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_sock.bind(('localhost', 9090)) while True: data, address = server_sock.recvfrom(1024) if data == b'Hello, server': print(data) server_sock.sendto(b'Hello, client', address) else: server_sock.close() break client.py import socket # UDP client client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_sock.connect(('localhost', 9090)) client_sock.sendto(b'Hello, server', ('localhost', 9090)) data, server = client_sock.recvfrom(1024) client_sock.close() print(data) \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8081)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break print(data.decode(\"utf-8\")) client_sock.sendall('Enter the sides (for ex. 5,9)'.encode(\"utf-8\")) data = client_sock.recv(1024) sides = data.decode(\"utf-8\") try: a, b = map(int, sides.split(',')) c = (a ** 2 + b ** 2) ** 0.5 ans = str(round(c, 3)) client_sock.sendall(ans.encode(\"utf-8\")) except Exception: client_sock.sendall('Error. Try again'.encode(\"utf-8\")) client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8081)) client_sock.sendall('Pyfagorean theorem'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) sides = input() client_sock.sendall(sides.encode(\"utf-8\")) data = client_sock.recv(1024) client_sock.close() print(data.decode(\"utf-8\")) \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8080)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break status_line = \"HTTP/1.0 200 OK\\n\" resp_headers = \"Content-Type: text/html\\n\\n\" body = open('index.html', 'r').read() response = status_line + resp_headers + body client_sock.sendall(response.encode(\"utf-8\")) open('index.html', 'r').close() client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8080)) client_sock.sendall('Hi!'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) client_sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Message</title> </head> <body> Hello from server! </body> </html> \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket import threading server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 9090)) server_sock.listen(5) clients = dict() # send message to everyone def broadcast(message): for client in clients: client.sendall(message) # handling a client def handle(client): while True: try: message = client.recv(1024) if message.decode(\"utf-8\") == \"{}:bye\".format(clients[client]): broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break broadcast(message) except: broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break def chat(): while True: client_sock, client_addr = server_sock.accept() client_sock.sendall('Nick:'.encode(\"utf-8\")) nick = client_sock.recv(1024).decode(\"utf-8\") clients[client_sock] = nick broadcast('{} joined!'.format(nick).encode(\"utf-8\")) thread = threading.Thread(target=handle, args=(client_sock,)) thread.start() chat() client.py import socket import threading client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 9090)) nick = input(\"Your nick: \") def get_message(): while True: try: message = client_sock.recv(1024) if len(message) == 0: client_sock.close() break if message.decode(\"utf-8\") == 'Nick:': client_sock.sendall(nick.encode(\"utf-8\")) else: print(message.decode(\"utf-8\")) except: client_sock.close() break def send_message(): while True: try: text = input(\"\") message = '{}:{}'.format(nick, text) client_sock.sendall(message.encode(\"utf-8\")) if text == \"bye\": break except: client_sock.close() break get_thread, send_thread = threading.Thread(target=get_message), threading.Thread(target=send_message) get_thread.start() send_thread.start() \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket MAX_LINE = 64 * 1024 class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self._host = host self._port = port # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind((self._host, self._port)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() try: self.serve_client(client_sock) except: server_sock.close() break # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_sock): try: req_str = client_sock.recv(65536).decode(\"utf-8\") method, url, params, headers, body = self.parse_request(req_str) resp = self.handle_request(method, url, params, headers, body) if resp is not None: self.send_response(client_sock, resp) except ConnectionResetError: client_sock = None if client_sock: client_sock.close() @staticmethod def parse_request(req_str): req_str.replace('\\r', '') req_lines = req_str.split('\\n') headers, method, url, version, body, params = dict(), \"\", \"\", \"\", \"\", \"\" body_start_idx = -1 for i in range(0, len(req_lines)): line = req_lines[i] if i == 0: # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 words = line.split() # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c if len(words) != 3: # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e 3 \u0447\u0430\u0441\u0442\u0438 raise Exception('Malformed request line') method, url, version = words if '?' in url: url, params = url.split('?') params_strings = params.split(\"&\") params = dict() for param_string in params_strings: params[param_string.split(\"=\")[0]] = param_string.split(\"=\")[1] if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') continue # \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435\u043b\u0430 if not \":\" in line: # \u0434\u0430\u043b\u044c\u0448\u0435 \u0442\u0435\u043b\u043e body_start_idx = i + 1 break # \u0415\u0449\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 headers[line.split(':')[0]] = line.split(':')[1] if body_start_idx != -1 and body_start_idx < len(req_lines): body = req_lines[body_start_idx:] return method, url, params, headers, body # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 # \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GET \u0438\u043b\u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441. GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. POST \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. @staticmethod def handle_request(method, url, params, headers, body): if not url == \"/\": return \"\" if method == \"GET\": if params == \"\": resp = \"HTTP/1.1 200 OK\\n\\n\" with open('index.html', 'r') as f: resp += f.read() f.close() return resp if 'subject' in params and params['subject'] in subjects: subject = params['subject'] resp = \"HTTP/1.1 200 OK\\n\\n\" resp += f\"<html><head><title>Journal for {subject}</title></head><body>\" resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp raise \"invalid get request\" if method == \"POST\": body_kvps = body[0].split('&') body_params = dict() for kvp in body_kvps: body_params[kvp.split('=')[0]] = kvp.split('=')[1] if 'subject' in body_params and 'grade' in body_params and len(body_params) == 2: subject = body_params['subject'].strip() grade = body_params['grade'].strip() if grade != '' and subject != '': if subject not in subjects: subjects[subject] = [] subjects[subject].append(grade) resp = \"HTTP/1.1 200 OK\\n\\n\" resp += \"<html><head><title>Journal</title></head><body>\" for subject in subjects: resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. # \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. @staticmethod def send_response(client_sock, resp): client_sock.sendall(resp.encode(\"utf-8\")) if __name__ == '__main__': host = 'localhost' port = 9091 serv = MyHTTPServer(host, port) subjects = dict() try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Journal</title> </head> <body> <form action=\"/\" method=\"post\"> <label for=\"name\">Subject:</label> <input type=\"text\" id=\"name\" name=\"subject\"/> <label for=\"grade\">Grade:</label> <input type=\"number\" id=\"grade\" name=\"grade\"/> <input type=\"submit\"> </form> </body> </html>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket # UDP server server_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_sock.bind(('localhost', 9090)) while True: data, address = server_sock.recvfrom(1024) if data == b'Hello, server': print(data) server_sock.sendto(b'Hello, client', address) else: server_sock.close() break client.py import socket # UDP client client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_sock.connect(('localhost', 9090)) client_sock.sendto(b'Hello, server', ('localhost', 9090)) data, server = client_sock.recvfrom(1024) client_sock.close() print(data)","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8081)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break print(data.decode(\"utf-8\")) client_sock.sendall('Enter the sides (for ex. 5,9)'.encode(\"utf-8\")) data = client_sock.recv(1024) sides = data.decode(\"utf-8\") try: a, b = map(int, sides.split(',')) c = (a ** 2 + b ** 2) ** 0.5 ans = str(round(c, 3)) client_sock.sendall(ans.encode(\"utf-8\")) except Exception: client_sock.sendall('Error. Try again'.encode(\"utf-8\")) client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8081)) client_sock.sendall('Pyfagorean theorem'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) sides = input() client_sock.sendall(sides.encode(\"utf-8\")) data = client_sock.recv(1024) client_sock.close() print(data.decode(\"utf-8\"))","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8080)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break status_line = \"HTTP/1.0 200 OK\\n\" resp_headers = \"Content-Type: text/html\\n\\n\" body = open('index.html', 'r').read() response = status_line + resp_headers + body client_sock.sendall(response.encode(\"utf-8\")) open('index.html', 'r').close() client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8080)) client_sock.sendall('Hi!'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) client_sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Message</title> </head> <body> Hello from server! </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket import threading server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 9090)) server_sock.listen(5) clients = dict() # send message to everyone def broadcast(message): for client in clients: client.sendall(message) # handling a client def handle(client): while True: try: message = client.recv(1024) if message.decode(\"utf-8\") == \"{}:bye\".format(clients[client]): broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break broadcast(message) except: broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break def chat(): while True: client_sock, client_addr = server_sock.accept() client_sock.sendall('Nick:'.encode(\"utf-8\")) nick = client_sock.recv(1024).decode(\"utf-8\") clients[client_sock] = nick broadcast('{} joined!'.format(nick).encode(\"utf-8\")) thread = threading.Thread(target=handle, args=(client_sock,)) thread.start() chat() client.py import socket import threading client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 9090)) nick = input(\"Your nick: \") def get_message(): while True: try: message = client_sock.recv(1024) if len(message) == 0: client_sock.close() break if message.decode(\"utf-8\") == 'Nick:': client_sock.sendall(nick.encode(\"utf-8\")) else: print(message.decode(\"utf-8\")) except: client_sock.close() break def send_message(): while True: try: text = input(\"\") message = '{}:{}'.format(nick, text) client_sock.sendall(message.encode(\"utf-8\")) if text == \"bye\": break except: client_sock.close() break get_thread, send_thread = threading.Thread(target=get_message), threading.Thread(target=send_message) get_thread.start() send_thread.start()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket MAX_LINE = 64 * 1024 class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self._host = host self._port = port # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind((self._host, self._port)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() try: self.serve_client(client_sock) except: server_sock.close() break # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_sock): try: req_str = client_sock.recv(65536).decode(\"utf-8\") method, url, params, headers, body = self.parse_request(req_str) resp = self.handle_request(method, url, params, headers, body) if resp is not None: self.send_response(client_sock, resp) except ConnectionResetError: client_sock = None if client_sock: client_sock.close() @staticmethod def parse_request(req_str): req_str.replace('\\r', '') req_lines = req_str.split('\\n') headers, method, url, version, body, params = dict(), \"\", \"\", \"\", \"\", \"\" body_start_idx = -1 for i in range(0, len(req_lines)): line = req_lines[i] if i == 0: # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 words = line.split() # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c if len(words) != 3: # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e 3 \u0447\u0430\u0441\u0442\u0438 raise Exception('Malformed request line') method, url, version = words if '?' in url: url, params = url.split('?') params_strings = params.split(\"&\") params = dict() for param_string in params_strings: params[param_string.split(\"=\")[0]] = param_string.split(\"=\")[1] if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') continue # \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435\u043b\u0430 if not \":\" in line: # \u0434\u0430\u043b\u044c\u0448\u0435 \u0442\u0435\u043b\u043e body_start_idx = i + 1 break # \u0415\u0449\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 headers[line.split(':')[0]] = line.split(':')[1] if body_start_idx != -1 and body_start_idx < len(req_lines): body = req_lines[body_start_idx:] return method, url, params, headers, body # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 # \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GET \u0438\u043b\u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441. GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. POST \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. @staticmethod def handle_request(method, url, params, headers, body): if not url == \"/\": return \"\" if method == \"GET\": if params == \"\": resp = \"HTTP/1.1 200 OK\\n\\n\" with open('index.html', 'r') as f: resp += f.read() f.close() return resp if 'subject' in params and params['subject'] in subjects: subject = params['subject'] resp = \"HTTP/1.1 200 OK\\n\\n\" resp += f\"<html><head><title>Journal for {subject}</title></head><body>\" resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp raise \"invalid get request\" if method == \"POST\": body_kvps = body[0].split('&') body_params = dict() for kvp in body_kvps: body_params[kvp.split('=')[0]] = kvp.split('=')[1] if 'subject' in body_params and 'grade' in body_params and len(body_params) == 2: subject = body_params['subject'].strip() grade = body_params['grade'].strip() if grade != '' and subject != '': if subject not in subjects: subjects[subject] = [] subjects[subject].append(grade) resp = \"HTTP/1.1 200 OK\\n\\n\" resp += \"<html><head><title>Journal</title></head><body>\" for subject in subjects: resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. # \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. @staticmethod def send_response(client_sock, resp): client_sock.sendall(resp.encode(\"utf-8\")) if __name__ == '__main__': host = 'localhost' port = 9091 serv = MyHTTPServer(host, port) subjects = dict() try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Journal</title> </head> <body> <form action=\"/\" method=\"post\"> <label for=\"name\">Subject:</label> <input type=\"text\" id=\"name\" name=\"subject\"/> <label for=\"grade\">Grade:</label> <input type=\"number\" id=\"grade\" name=\"grade\"/> <input type=\"submit\"> </form> </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"}]}