{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u043d\u0438\u043a \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u0438, K33412","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33412","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u043d\u0438\u043a \u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u0438, K33412"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket # UDP server server_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_sock.bind(('localhost', 9090)) while True: data, address = server_sock.recvfrom(1024) if data == b'Hello, server': print(data) server_sock.sendto(b'Hello, client', address) else: server_sock.close() break client.py import socket # UDP client client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_sock.connect(('localhost', 9090)) client_sock.sendto(b'Hello, server', ('localhost', 9090)) data, server = client_sock.recvfrom(1024) client_sock.close() print(data) \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8081)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break print(data.decode(\"utf-8\")) client_sock.sendall('Enter the sides (for ex. 5,9)'.encode(\"utf-8\")) data = client_sock.recv(1024) sides = data.decode(\"utf-8\") try: a, b = map(int, sides.split(',')) c = (a ** 2 + b ** 2) ** 0.5 ans = str(round(c, 3)) client_sock.sendall(ans.encode(\"utf-8\")) except Exception: client_sock.sendall('Error. Try again'.encode(\"utf-8\")) client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8081)) client_sock.sendall('Pyfagorean theorem'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) sides = input() client_sock.sendall(sides.encode(\"utf-8\")) data = client_sock.recv(1024) client_sock.close() print(data.decode(\"utf-8\")) \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8080)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break status_line = \"HTTP/1.0 200 OK\\n\" resp_headers = \"Content-Type: text/html\\n\\n\" body = open('index.html', 'r').read() response = status_line + resp_headers + body client_sock.sendall(response.encode(\"utf-8\")) open('index.html', 'r').close() client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8080)) client_sock.sendall('Hi!'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) client_sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Message</title> </head> <body> Hello from server! </body> </html> \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket import threading server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 9090)) server_sock.listen(5) clients = dict() # send message to everyone def broadcast(message): for client in clients: client.sendall(message) # handling a client def handle(client): while True: try: message = client.recv(1024) if message.decode(\"utf-8\") == \"{}:bye\".format(clients[client]): broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break broadcast(message) except: broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break def chat(): while True: client_sock, client_addr = server_sock.accept() client_sock.sendall('Nick:'.encode(\"utf-8\")) nick = client_sock.recv(1024).decode(\"utf-8\") clients[client_sock] = nick broadcast('{} joined!'.format(nick).encode(\"utf-8\")) thread = threading.Thread(target=handle, args=(client_sock,)) thread.start() chat() client.py import socket import threading client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 9090)) nick = input(\"Your nick: \") def get_message(): while True: try: message = client_sock.recv(1024) if len(message) == 0: client_sock.close() break if message.decode(\"utf-8\") == 'Nick:': client_sock.sendall(nick.encode(\"utf-8\")) else: print(message.decode(\"utf-8\")) except: client_sock.close() break def send_message(): while True: try: text = input(\"\") message = '{}:{}'.format(nick, text) client_sock.sendall(message.encode(\"utf-8\")) if text == \"bye\": break except: client_sock.close() break get_thread, send_thread = threading.Thread(target=get_message), threading.Thread(target=send_message) get_thread.start() send_thread.start() \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket MAX_LINE = 64 * 1024 class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self._host = host self._port = port # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind((self._host, self._port)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() try: self.serve_client(client_sock) except: server_sock.close() break # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_sock): try: req_str = client_sock.recv(65536).decode(\"utf-8\") method, url, params, headers, body = self.parse_request(req_str) resp = self.handle_request(method, url, params, headers, body) if resp is not None: self.send_response(client_sock, resp) except ConnectionResetError: client_sock = None if client_sock: client_sock.close() @staticmethod def parse_request(req_str): req_str.replace('\\r', '') req_lines = req_str.split('\\n') headers, method, url, version, body, params = dict(), \"\", \"\", \"\", \"\", \"\" body_start_idx = -1 for i in range(0, len(req_lines)): line = req_lines[i] if i == 0: # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 words = line.split() # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c if len(words) != 3: # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e 3 \u0447\u0430\u0441\u0442\u0438 raise Exception('Malformed request line') method, url, version = words if '?' in url: url, params = url.split('?') params_strings = params.split(\"&\") params = dict() for param_string in params_strings: params[param_string.split(\"=\")[0]] = param_string.split(\"=\")[1] if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') continue # \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435\u043b\u0430 if not \":\" in line: # \u0434\u0430\u043b\u044c\u0448\u0435 \u0442\u0435\u043b\u043e body_start_idx = i + 1 break # \u0415\u0449\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 headers[line.split(':')[0]] = line.split(':')[1] if body_start_idx != -1 and body_start_idx < len(req_lines): body = req_lines[body_start_idx:] return method, url, params, headers, body # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 # \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GET \u0438\u043b\u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441. GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. POST \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. @staticmethod def handle_request(method, url, params, headers, body): if not url == \"/\": return \"\" if method == \"GET\": if params == \"\": resp = \"HTTP/1.1 200 OK\\n\\n\" with open('index.html', 'r') as f: resp += f.read() f.close() return resp if 'subject' in params and params['subject'] in subjects: subject = params['subject'] resp = \"HTTP/1.1 200 OK\\n\\n\" resp += f\"<html><head><title>Journal for {subject}</title></head><body>\" resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp raise \"invalid get request\" if method == \"POST\": body_kvps = body[0].split('&') body_params = dict() for kvp in body_kvps: body_params[kvp.split('=')[0]] = kvp.split('=')[1] if 'subject' in body_params and 'grade' in body_params and len(body_params) == 2: subject = body_params['subject'].strip() grade = body_params['grade'].strip() if grade != '' and subject != '': if subject not in subjects: subjects[subject] = [] subjects[subject].append(grade) resp = \"HTTP/1.1 200 OK\\n\\n\" resp += \"<html><head><title>Journal</title></head><body>\" for subject in subjects: resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. # \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. @staticmethod def send_response(client_sock, resp): client_sock.sendall(resp.encode(\"utf-8\")) if __name__ == '__main__': host = 'localhost' port = 9091 serv = MyHTTPServer(host, port) subjects = dict() try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Journal</title> </head> <body> <form action=\"/\" method=\"post\"> <label for=\"name\">Subject:</label> <input type=\"text\" id=\"name\" name=\"subject\"/> <label for=\"grade\">Grade:</label> <input type=\"number\" id=\"grade\" name=\"grade\"/> <input type=\"submit\"> </form> </body> </html>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server.py import socket # UDP server server_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_sock.bind(('localhost', 9090)) while True: data, address = server_sock.recvfrom(1024) if data == b'Hello, server': print(data) server_sock.sendto(b'Hello, client', address) else: server_sock.close() break client.py import socket # UDP client client_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_sock.connect(('localhost', 9090)) client_sock.sendto(b'Hello, server', ('localhost', 9090)) data, server = client_sock.recvfrom(1024) client_sock.close() print(data)","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8081)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break print(data.decode(\"utf-8\")) client_sock.sendall('Enter the sides (for ex. 5,9)'.encode(\"utf-8\")) data = client_sock.recv(1024) sides = data.decode(\"utf-8\") try: a, b = map(int, sides.split(',')) c = (a ** 2 + b ** 2) ** 0.5 ans = str(round(c, 3)) client_sock.sendall(ans.encode(\"utf-8\")) except Exception: client_sock.sendall('Error. Try again'.encode(\"utf-8\")) client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8081)) client_sock.sendall('Pyfagorean theorem'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) sides = input() client_sock.sendall(sides.encode(\"utf-8\")) data = client_sock.recv(1024) client_sock.close() print(data.decode(\"utf-8\"))","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server.py import socket server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 8080)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() data = client_sock.recv(1024) if not data: break status_line = \"HTTP/1.0 200 OK\\n\" resp_headers = \"Content-Type: text/html\\n\\n\" body = open('index.html', 'r').read() response = status_line + resp_headers + body client_sock.sendall(response.encode(\"utf-8\")) open('index.html', 'r').close() client_sock.close() client.py import socket client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 8080)) client_sock.sendall('Hi!'.encode(\"utf-8\")) data = client_sock.recv(1024) print(data.decode(\"utf-8\")) client_sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Message</title> </head> <body> Hello from server! </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server.py import socket import threading server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind(('localhost', 9090)) server_sock.listen(5) clients = dict() # send message to everyone def broadcast(message): for client in clients: client.sendall(message) # handling a client def handle(client): while True: try: message = client.recv(1024) if message.decode(\"utf-8\") == \"{}:bye\".format(clients[client]): broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break broadcast(message) except: broadcast('{} has left'.format(clients.pop(client)).encode(\"utf-8\")) client.close() break def chat(): while True: client_sock, client_addr = server_sock.accept() client_sock.sendall('Nick:'.encode(\"utf-8\")) nick = client_sock.recv(1024).decode(\"utf-8\") clients[client_sock] = nick broadcast('{} joined!'.format(nick).encode(\"utf-8\")) thread = threading.Thread(target=handle, args=(client_sock,)) thread.start() chat() client.py import socket import threading client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_sock.connect(('localhost', 9090)) nick = input(\"Your nick: \") def get_message(): while True: try: message = client_sock.recv(1024) if len(message) == 0: client_sock.close() break if message.decode(\"utf-8\") == 'Nick:': client_sock.sendall(nick.encode(\"utf-8\")) else: print(message.decode(\"utf-8\")) except: client_sock.close() break def send_message(): while True: try: text = input(\"\") message = '{}:{}'.format(nick, text) client_sock.sendall(message.encode(\"utf-8\")) if text == \"bye\": break except: client_sock.close() break get_thread, send_thread = threading.Thread(target=get_message), threading.Thread(target=send_message) get_thread.start() send_thread.start()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. server.py import socket MAX_LINE = 64 * 1024 class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, host, port): self._host = host self._port = port # \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 def serve_forever(self): server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_sock.bind((self._host, self._port)) server_sock.listen(5) while True: client_sock, client_addr = server_sock.accept() try: self.serve_client(client_sock) except: server_sock.close() break # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f def serve_client(self, client_sock): try: req_str = client_sock.recv(65536).decode(\"utf-8\") method, url, params, headers, body = self.parse_request(req_str) resp = self.handle_request(method, url, params, headers, body) if resp is not None: self.send_response(client_sock, resp) except ConnectionResetError: client_sock = None if client_sock: client_sock.close() @staticmethod def parse_request(req_str): req_str.replace('\\r', '') req_lines = req_str.split('\\n') headers, method, url, version, body, params = dict(), \"\", \"\", \"\", \"\", \"\" body_start_idx = -1 for i in range(0, len(req_lines)): line = req_lines[i] if i == 0: # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u0442\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 words = line.split() # \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c if len(words) != 3: # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e 3 \u0447\u0430\u0441\u0442\u0438 raise Exception('Malformed request line') method, url, version = words if '?' in url: url, params = url.split('?') params_strings = params.split(\"&\") params = dict() for param_string in params_strings: params[param_string.split(\"=\")[0]] = param_string.split(\"=\")[1] if version != 'HTTP/1.1': raise Exception('Unexpected HTTP version') continue # \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435\u043b\u0430 if not \":\" in line: # \u0434\u0430\u043b\u044c\u0448\u0435 \u0442\u0435\u043b\u043e body_start_idx = i + 1 break # \u0415\u0449\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 headers[line.split(':')[0]] = line.split(':')[1] if body_start_idx != -1 and body_start_idx < len(req_lines): body = req_lines[body_start_idx:] return method, url, params, headers, body # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 # \u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GET \u0438\u043b\u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441. GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. POST \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. @staticmethod def handle_request(method, url, params, headers, body): if not url == \"/\": return \"\" if method == \"GET\": if params == \"\": resp = \"HTTP/1.1 200 OK\\n\\n\" with open('index.html', 'r') as f: resp += f.read() f.close() return resp if 'subject' in params and params['subject'] in subjects: subject = params['subject'] resp = \"HTTP/1.1 200 OK\\n\\n\" resp += f\"<html><head><title>Journal for {subject}</title></head><body>\" resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp raise \"invalid get request\" if method == \"POST\": body_kvps = body[0].split('&') body_params = dict() for kvp in body_kvps: body_params[kvp.split('=')[0]] = kvp.split('=')[1] if 'subject' in body_params and 'grade' in body_params and len(body_params) == 2: subject = body_params['subject'].strip() grade = body_params['grade'].strip() if grade != '' and subject != '': if subject not in subjects: subjects[subject] = [] subjects[subject].append(grade) resp = \"HTTP/1.1 200 OK\\n\\n\" resp += \"<html><head><title>Journal</title></head><body>\" for subject in subjects: resp += f\"<p>{subject}: \" for grade in subjects[subject]: resp += f\"{grade}, \" resp = resp[:-2] resp += \"</p>\" resp += \"</body></html>\" return resp # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. # \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. @staticmethod def send_response(client_sock, resp): client_sock.sendall(resp.encode(\"utf-8\")) if __name__ == '__main__': host = 'localhost' port = 9091 serv = MyHTTPServer(host, port) subjects = dict() try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Journal</title> </head> <body> <form action=\"/\" method=\"post\"> <label for=\"name\">Subject:</label> <input type=\"text\" id=\"name\" name=\"subject\"/> <label for=\"grade\">Grade:</label> <input type=\"number\" id=\"grade\" name=\"grade\"/> <input type=\"submit\"> </form> </body> </html>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3 \"\u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445.\" \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442), \u043d\u043e\u043c\u0435\u0440\u0435 \u0433\u0435\u0439\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.core.validators import MaxValueValidator, MinValueValidator class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) date_of_birth = models.DateTimeField(null=True, blank=True) def __str__(self): return self.username class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\" class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\" class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \" ``` * `forms.py` ```python from django.contrib.auth.forms import UserCreationForm from django import forms from django.core.validators import MaxValueValidator, MinValueValidator from .models import User class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'date_of_birth', 'passport') class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField(label='Flight date') class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3) class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3) urls.py from django.urls import path from . import views urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('flight/<int:flight_id>/book', views.book_flight) ] views.py import time from flights_app.forms import * from flights_app.models import User, Flight, Ticket, Feedback from django.shortcuts import render, redirect from django.contrib.auth import authenticate, login, logout def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html') def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'}) def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form}) def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets}) def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()}) def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, }) def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form}) def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') def update_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm() return render(request, 'update.html', {'form': form, 'ticket': ticket}) def book_flight(request, flight_id): if request.method == 'POST': form = BookForm(request.POST) if form.is_valid(): Ticket.objects.create(flight_id=flight_id, type=form.cleaned_data.get('type'), seat=form.cleaned_data.get('seat'), user_id=request.user.id, ticket_id=int(str(time.time_ns())[-7:])) return redirect('/tickets') else: form = BookForm() return render(request, 'book.html', {'form': form})","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#3","text":"\u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442), \u043d\u043e\u043c\u0435\u0440\u0435 \u0433\u0435\u0439\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. models.py from django.db import models from django.contrib.auth.models import AbstractUser from django.core.validators import MaxValueValidator, MinValueValidator class User(AbstractUser): username = models.CharField(\"Username\", max_length=30, null=False, unique=True) passport = models.CharField(\"Passport number\", max_length=12, null=False) first_name = models.CharField(\"Name\", max_length=30, null=False) lastname = models.CharField(\"Lastname\", max_length=30, null=False) date_of_birth = models.DateTimeField(null=True, blank=True) def __str__(self): return self.username class Flight(models.Model): flight_number = models.CharField(\"Flight number\", max_length=20, unique=True) airline = models.CharField(\"Airline name\", max_length=30, null=False) departure = models.DateTimeField(\"Departure date and time\", null=False) arrival = models.DateTimeField(\"Arrival date and time\", null=False) def __str__(self): return f\"{self.airline}: {self.flight_number}\" class Ticket(models.Model): TYPE_FLIGHT = [('TO', 'Arrival'), ('FROM', 'Departure')] ticket_id = models.CharField(\"Ticket number\", primary_key=True, max_length=20, unique=True) seat = models.CharField(\"Place in plane\", max_length=3, null=True) gate = models.CharField(\"Gate number\", max_length=3, null=True) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) type = models.CharField(\"Flight type\", max_length=30, choices=TYPE_FLIGHT) def __str__(self): return f\"{self.flight} - {self.ticket_id}{self.seat == '' if '' else f'({self.seat})'}\" class Feedback(models.Model): comment = models.TextField(\"Comment\", null=False) rate = models.PositiveIntegerField( validators=[MaxValueValidator(limit_value=10), MinValueValidator(limit_value=1)] ) user = models.ForeignKey(User, on_delete=models.CASCADE) flight = models.ForeignKey(Flight, on_delete=models.CASCADE) date = models.DateField(\"Flight date\") def __str__(self): return f\"{self.flight}({self.user}) - {self.rate} - \\'{self.comment[:10]}\\' \" ``` * `forms.py` ```python from django.contrib.auth.forms import UserCreationForm from django import forms from django.core.validators import MaxValueValidator, MinValueValidator from .models import User class NewUserForm(UserCreationForm): class Meta: model = User fields = ('username', 'email', 'lastname', 'first_name', 'date_of_birth', 'passport') class FeedbackForm(forms.Form): comment = forms.CharField(label='Comment', max_length=100) rating = forms.IntegerField(label='Rating', validators=[ MaxValueValidator(10), MinValueValidator(1) ]) date = forms.DateField(label='Flight date') class TicketUpdateForm(forms.Form): seat = forms.CharField(label='Seat', max_length=3) class BookForm(forms.Form): type = forms.ChoiceField(choices=(('TO', 'Arrival'), ('FROM', 'Departure'))) seat = forms.CharField(label=\"Seat\", max_length=3) urls.py from django.urls import path from . import views urlpatterns = [ path('', views.index), path('auth', views.auth), path('logout', views.logout_view), path('register', views.registration), path('flights', views.flights), path('flight/<int:flight_id>/users', views.users_list), path('flight/<int:flight_id>/feedbacks', views.feedbacks), path('flight/<int:flight_id>/leave_feedback', views.create_feedback), path('tickets', views.tickets), path('ticket/<int:ticket_id>/delete', views.delete_ticket), path('ticket/<int:ticket_id>/update', views.update_ticket), path('flight/<int:flight_id>/book', views.book_flight) ] views.py import time from flights_app.forms import * from flights_app.models import User, Flight, Ticket, Feedback from django.shortcuts import render, redirect from django.contrib.auth import authenticate, login, logout def index(request): if request.user.is_authenticated: return render(request, 'index.html') else: return render(request, 'auth.html') def logout_view(request): logout(request) return redirect('/') def auth(request): username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('/') else: return render(request, 'auth.html', {'error': 'Try again'}) def registration(request): if request.method == \"POST\": form = NewUserForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('/') else: form = NewUserForm() return render(request, \"register.html\", {\"register_form\": form}) def tickets(request): user_tickets = Ticket.objects.filter(user=request.user) return render(request, 'tickets.html', {'tickets': user_tickets}) def flights(request): return render(request, 'flights.html', {'flights': Flight.objects.all()}) def users_list(request, flight_id): user_ids = Ticket.objects.filter(flight_id=flight_id).values('user_id') users = User.objects.filter(id__in=user_ids) flight = Flight.objects.get(id=flight_id) return render(request, \"users.html\", { \"users\": users, \"flight\": flight, }) def feedbacks(request, flight_id): flight = Flight.objects.get(id=flight_id) feedbacks = Feedback.objects.filter(flight_id=flight_id) return render(request, \"feedbacks.html\", { \"feedbacks\": feedbacks, \"flight\": flight, }) def create_feedback(request, flight_id): if request.method == 'POST': form = FeedbackForm(request.POST) if form.is_valid(): Feedback.objects.create(comment=form.cleaned_data.get('comment'), rate=form.cleaned_data.get('rating'), date=form.cleaned_data.get('date'), user_id=request.user.id, flight_id=flight_id) return redirect('/flights') else: form = FeedbackForm() return render(request, 'leave_feedback.html', {'form': form}) def delete_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id == request.user.id: ticket.delete() return redirect('/tickets') def update_ticket(request, ticket_id): ticket = Ticket.objects.get(ticket_id=ticket_id) if ticket.user_id != request.user.id: return redirect('/') if request.method == 'POST': form = TicketUpdateForm(request.POST) if form.is_valid(): ticket.seat = form.cleaned_data.get('seat') ticket.save() return redirect('/tickets') else: form = TicketUpdateForm() return render(request, 'update.html', {'form': form, 'ticket': ticket}) def book_flight(request, flight_id): if request.method == 'POST': form = BookForm(request.POST) if form.is_valid(): Ticket.objects.create(flight_id=flight_id, type=form.cleaned_data.get('type'), seat=form.cleaned_data.get('seat'), user_id=request.user.id, ticket_id=int(str(time.time_ns())[-7:])) return redirect('/tickets') else: form = BookForm() return render(request, 'book.html', {'form': form})","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 3 \"\u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445.\""},{"location":"lr3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u043a \u0444\u0440\u043e\u043d\u0442\u0443: \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0441 \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 \u0432 \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f\u043c\u0438, \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u043e\u0434 \u0430\u043d\u0433\u043b\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438 \u043c\u0435\u0441\u0442\u0443 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f. \u041d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0438 \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0435\u0433\u043e. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043e \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0438 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u0412 \u043b\u0438\u0447\u043d\u043e\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0435 \u0438 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432 \u043c\u043e\u0434\u0435\u043b\u0435 \u0435\u0441\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438: User, Event, Comment, UserEnrolledEvent (\u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u044e\u0437\u0435\u0440\u043e\u043c \u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435\u043c): models.py from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Event(models.Model): id = models.IntegerField(primary_key=True) title = models.CharField(max_length=30, null=False, unique=True) address = models.CharField(max_length=100, null=False) district = models.CharField(max_length=30, null=False) type = models.CharField(max_length=30, null=False) date = models.DateTimeField(null=False) short_description = models.CharField(max_length=200, null=False) full_description = models.CharField(max_length=1000, null=False) website = models.CharField(max_length=100, null=False) def __str__(self): return self.title.__str__() class User(AbstractUser): id = models.IntegerField(primary_key=True) img_url = models.CharField(max_length=100, null=True, default='default_user.png') email = models.CharField(max_length=30, null=False, unique=True) user_info = models.CharField(max_length=200, null=True) REQUIRED_FIELDS = [\"img_url\", \"user_info\", \"email\", \"first_name\", \"last_name\"] def __str__(self): return self.username.__str__() class UserEnrolledEvent(models.Model): id = models.IntegerField(primary_key=True) event = models.ForeignKey(Event, on_delete=models.CASCADE, to_field=\"title\") user = models.ForeignKey(User, on_delete=models.CASCADE, to_field=\"username\") def __str__(self): return self.id.__str__() class Comment(models.Model): id = models.IntegerField(primary_key=True) user = models.ForeignKey(User, on_delete=models.CASCADE, to_field=\"username\") text = models.CharField(max_length=1000, null=True) event = models.ForeignKey(Event, on_delete=models.CASCADE, to_field=\"title\") def __str__(self): return self.id.__str__() \u0412 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 get_queryset(self) \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. views.py from .serializers import * from rest_framework.generics import RetrieveUpdateAPIView, ListAPIView, CreateAPIView, RetrieveAPIView, \\ DestroyAPIView from .models import * # Create your views here. class EventListAPIView(ListAPIView): serializer_class = EventSerializer queryset = Event.objects.all() class EventCreateAPIView(CreateAPIView): serializer_class = EventSerializer queryset = Event.objects.all() class UserDestroyAPIView(DestroyAPIView): serializer_class = UserListSerializer queryset = User.objects.all() class UserCreateAPIView(CreateAPIView): serializer_class = UserListSerializer queryset = User.objects.all() class UserListAPIView(ListAPIView): serializer_class = UserListSerializer queryset = User.objects.all() class EventRetrieveAPIView(RetrieveAPIView): serializer_class = EventSerializer queryset = Event.objects.all() class UserRetrieveAPIView(RetrieveAPIView): serializer_class = UserRetrieveSerializer queryset = User.objects.all() class UserUpdateAPIView(RetrieveUpdateAPIView): serializer_class = UserUpdateSerializer queryset = User.objects.all() class EnrollCreateAPIView(CreateAPIView): serializer_class = UsersEventSerializer queryset = UserEnrolledEvent.objects.all() class UserEnrolledEventAPIView(ListAPIView): serializer_class = UserEventsSerializer def get_queryset(self): user_id = self.kwargs['user_id'] return Comment.objects.filter(user__id=user_id) class EventCommentsAPIView(ListAPIView): serializer_class = EventCommentSerializer def get_queryset(self): event_id = self.kwargs['event_id'] return Comment.objects.filter(event__id=event_id) class EnrollListAPIView(ListAPIView): serializer_class = UsersEventSerializer queryset = UserEnrolledEvent.objects.all() class DeleteEnrolledEventAPIView(DestroyAPIView): serializer_class = UsersEventSerializer queryset = UserEnrolledEvent.objects.all() class CommentCreateAPIView(CreateAPIView): serializer_class = CommentSerializer queryset = Comment.objects.all() class CommentListAPIView(ListAPIView): serializer_class = CommentSerializer queryset = Comment.objects.all() class CommentRetrieveAPIView(RetrieveAPIView): serializer_class = CommentSerializer queryset = Comment.objects.all() class EventsFilterAPIView(ListAPIView): serializer_class = EventSerializer def get_queryset(self): type = self.kwargs['type'] district = self.kwargs['district'] if type == \"all\" and district != \"all\": return Event.objects.filter(district=district) elif district == \"all\" and type != \"all\": return Event.objects.filter(type=type) elif district == \"all\" and type == \"all\": return Event.objects.all() else: return Event.objects.filter(type=type, district=district) serializers.py from rest_framework import serializers from .models import * class EventSerializer(serializers.ModelSerializer): class Meta: model = Event fields = \"__all__\" class UserListSerializer(serializers.ModelSerializer): class Meta: model = User fields = \"__all__\" class UserRetrieveSerializer(serializers.ModelSerializer): class Meta: model = User fields = [\"id\", \"first_name\", \"last_name\", \"email\", \"username\", \"user_info\", \"img_url\"] class UserUpdateSerializer(serializers.ModelSerializer): class Meta: model = User fields = [\"password\", \"first_name\", \"last_name\", \"email\", \"img_url\", \"username\", \"user_info\"] class UserEventsSerializer(serializers.ModelSerializer): class Meta: model = UserEnrolledEvent fields = [\"user\", \"event\"] class UsersEventSerializer(serializers.ModelSerializer): class Meta: model = UserEnrolledEvent fields = \"__all__\" class CommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = \"__all__\" class EventCommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = [\"text\", \"user\", \"event\"] \u0412 \u044e\u0440\u043b\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f re_path \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0430\u043b\u0435\u0439 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438). urls.py from django.urls import path, re_path from .views import * app_name = \"lr3app\" urlpatterns = [ path('events/list/', EventListAPIView.as_view()), path('event/<int:pk>/', EventRetrieveAPIView.as_view()), path('event/create/', EventCreateAPIView.as_view()), path('users/list/', UserListAPIView.as_view()), path('user/<int:pk>/', UserRetrieveAPIView.as_view()), path('user/create/', UserCreateAPIView.as_view()), path('user/delete/<int:pk>/', UserDestroyAPIView.as_view()), path('user/edit/<int:pk>/', UserUpdateAPIView.as_view()), path('enroll/create/', EnrollCreateAPIView.as_view()), path('enroll/delete/<int:pk>/', DeleteEnrolledEventAPIView.as_view()), path('enroll/list/', EnrollListAPIView.as_view()), path('comments/list/', CommentListAPIView.as_view()), path('comment/create/', CommentCreateAPIView.as_view()), path('comment/<int:pk>/', CommentRetrieveAPIView.as_view()), re_path(r'event/comments/(?P<event_id>[0-9]+)/$', EventCommentsAPIView.as_view()), re_path(r'user/events/(?P<user_id>[0-9]+)/$', UserEnrolledEventAPIView.as_view()), re_path(r'events/filter/(?P<type>\\w*)/(?P<district>\\w*)/$', EventsFilterAPIView.as_view()) ] \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439: \u0412\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u0417\u0430\u043f\u0438\u0441\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044e: \u0412\u0441\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438: \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Postman. \u0422\u0430\u043a\u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u043c Patch \u0432 Postman \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435. \u043f\u0440\u0438\u043c\u0435\u0440 \u0412 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d swagger. \u043f\u0440\u0438\u043c\u0435\u0440","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lr3/#no3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lr3/#_1","text":"\u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0441 \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 \u0432 \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f\u043c\u0438, \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u043e\u0434 \u0430\u043d\u0433\u043b\u043e\u044f\u0437\u044b\u0447\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438 \u043c\u0435\u0441\u0442\u0443 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f. \u041d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0438 \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0435\u0433\u043e. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043e \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0438 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u0412 \u043b\u0438\u0447\u043d\u043e\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0435 \u0438 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432 \u043c\u043e\u0434\u0435\u043b\u0435 \u0435\u0441\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438: User, Event, Comment, UserEnrolledEvent (\u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u044e\u0437\u0435\u0440\u043e\u043c \u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435\u043c): models.py from django.db import models from django.contrib.auth.models import AbstractUser # Create your models here. class Event(models.Model): id = models.IntegerField(primary_key=True) title = models.CharField(max_length=30, null=False, unique=True) address = models.CharField(max_length=100, null=False) district = models.CharField(max_length=30, null=False) type = models.CharField(max_length=30, null=False) date = models.DateTimeField(null=False) short_description = models.CharField(max_length=200, null=False) full_description = models.CharField(max_length=1000, null=False) website = models.CharField(max_length=100, null=False) def __str__(self): return self.title.__str__() class User(AbstractUser): id = models.IntegerField(primary_key=True) img_url = models.CharField(max_length=100, null=True, default='default_user.png') email = models.CharField(max_length=30, null=False, unique=True) user_info = models.CharField(max_length=200, null=True) REQUIRED_FIELDS = [\"img_url\", \"user_info\", \"email\", \"first_name\", \"last_name\"] def __str__(self): return self.username.__str__() class UserEnrolledEvent(models.Model): id = models.IntegerField(primary_key=True) event = models.ForeignKey(Event, on_delete=models.CASCADE, to_field=\"title\") user = models.ForeignKey(User, on_delete=models.CASCADE, to_field=\"username\") def __str__(self): return self.id.__str__() class Comment(models.Model): id = models.IntegerField(primary_key=True) user = models.ForeignKey(User, on_delete=models.CASCADE, to_field=\"username\") text = models.CharField(max_length=1000, null=True) event = models.ForeignKey(Event, on_delete=models.CASCADE, to_field=\"title\") def __str__(self): return self.id.__str__() \u0412 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 get_queryset(self) \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. views.py from .serializers import * from rest_framework.generics import RetrieveUpdateAPIView, ListAPIView, CreateAPIView, RetrieveAPIView, \\ DestroyAPIView from .models import * # Create your views here. class EventListAPIView(ListAPIView): serializer_class = EventSerializer queryset = Event.objects.all() class EventCreateAPIView(CreateAPIView): serializer_class = EventSerializer queryset = Event.objects.all() class UserDestroyAPIView(DestroyAPIView): serializer_class = UserListSerializer queryset = User.objects.all() class UserCreateAPIView(CreateAPIView): serializer_class = UserListSerializer queryset = User.objects.all() class UserListAPIView(ListAPIView): serializer_class = UserListSerializer queryset = User.objects.all() class EventRetrieveAPIView(RetrieveAPIView): serializer_class = EventSerializer queryset = Event.objects.all() class UserRetrieveAPIView(RetrieveAPIView): serializer_class = UserRetrieveSerializer queryset = User.objects.all() class UserUpdateAPIView(RetrieveUpdateAPIView): serializer_class = UserUpdateSerializer queryset = User.objects.all() class EnrollCreateAPIView(CreateAPIView): serializer_class = UsersEventSerializer queryset = UserEnrolledEvent.objects.all() class UserEnrolledEventAPIView(ListAPIView): serializer_class = UserEventsSerializer def get_queryset(self): user_id = self.kwargs['user_id'] return Comment.objects.filter(user__id=user_id) class EventCommentsAPIView(ListAPIView): serializer_class = EventCommentSerializer def get_queryset(self): event_id = self.kwargs['event_id'] return Comment.objects.filter(event__id=event_id) class EnrollListAPIView(ListAPIView): serializer_class = UsersEventSerializer queryset = UserEnrolledEvent.objects.all() class DeleteEnrolledEventAPIView(DestroyAPIView): serializer_class = UsersEventSerializer queryset = UserEnrolledEvent.objects.all() class CommentCreateAPIView(CreateAPIView): serializer_class = CommentSerializer queryset = Comment.objects.all() class CommentListAPIView(ListAPIView): serializer_class = CommentSerializer queryset = Comment.objects.all() class CommentRetrieveAPIView(RetrieveAPIView): serializer_class = CommentSerializer queryset = Comment.objects.all() class EventsFilterAPIView(ListAPIView): serializer_class = EventSerializer def get_queryset(self): type = self.kwargs['type'] district = self.kwargs['district'] if type == \"all\" and district != \"all\": return Event.objects.filter(district=district) elif district == \"all\" and type != \"all\": return Event.objects.filter(type=type) elif district == \"all\" and type == \"all\": return Event.objects.all() else: return Event.objects.filter(type=type, district=district) serializers.py from rest_framework import serializers from .models import * class EventSerializer(serializers.ModelSerializer): class Meta: model = Event fields = \"__all__\" class UserListSerializer(serializers.ModelSerializer): class Meta: model = User fields = \"__all__\" class UserRetrieveSerializer(serializers.ModelSerializer): class Meta: model = User fields = [\"id\", \"first_name\", \"last_name\", \"email\", \"username\", \"user_info\", \"img_url\"] class UserUpdateSerializer(serializers.ModelSerializer): class Meta: model = User fields = [\"password\", \"first_name\", \"last_name\", \"email\", \"img_url\", \"username\", \"user_info\"] class UserEventsSerializer(serializers.ModelSerializer): class Meta: model = UserEnrolledEvent fields = [\"user\", \"event\"] class UsersEventSerializer(serializers.ModelSerializer): class Meta: model = UserEnrolledEvent fields = \"__all__\" class CommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = \"__all__\" class EventCommentSerializer(serializers.ModelSerializer): class Meta: model = Comment fields = [\"text\", \"user\", \"event\"] \u0412 \u044e\u0440\u043b\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f re_path \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0430\u043b\u0435\u0439 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438). urls.py from django.urls import path, re_path from .views import * app_name = \"lr3app\" urlpatterns = [ path('events/list/', EventListAPIView.as_view()), path('event/<int:pk>/', EventRetrieveAPIView.as_view()), path('event/create/', EventCreateAPIView.as_view()), path('users/list/', UserListAPIView.as_view()), path('user/<int:pk>/', UserRetrieveAPIView.as_view()), path('user/create/', UserCreateAPIView.as_view()), path('user/delete/<int:pk>/', UserDestroyAPIView.as_view()), path('user/edit/<int:pk>/', UserUpdateAPIView.as_view()), path('enroll/create/', EnrollCreateAPIView.as_view()), path('enroll/delete/<int:pk>/', DeleteEnrolledEventAPIView.as_view()), path('enroll/list/', EnrollListAPIView.as_view()), path('comments/list/', CommentListAPIView.as_view()), path('comment/create/', CommentCreateAPIView.as_view()), path('comment/<int:pk>/', CommentRetrieveAPIView.as_view()), re_path(r'event/comments/(?P<event_id>[0-9]+)/$', EventCommentsAPIView.as_view()), re_path(r'user/events/(?P<user_id>[0-9]+)/$', UserEnrolledEventAPIView.as_view()), re_path(r'events/filter/(?P<type>\\w*)/(?P<district>\\w*)/$', EventsFilterAPIView.as_view()) ] \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439: \u0412\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u0417\u0430\u043f\u0438\u0441\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044e: \u0412\u0441\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438: \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Postman. \u0422\u0430\u043a\u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u043c Patch \u0432 Postman \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435. \u043f\u0440\u0438\u043c\u0435\u0440 \u0412 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d swagger. \u043f\u0440\u0438\u043c\u0435\u0440","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u043a \u0444\u0440\u043e\u043d\u0442\u0443:"},{"location":"lr4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164 \u041c\u0438\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Vue.JS. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0414\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d \u0440\u043e\u0443\u0442\u0435\u0440 \u0414\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c API \u0420\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430: router index.js import {createRouter, createWebHistory} from 'vue-router' import MainPage from \"@/views/MainPage.vue\"; import EventPage from \"@/views/EventPage.vue\"; import SignUpPage from \"@/views/SignUpPage.vue\"; import SignInPage from \"@/views/SignInPage.vue\"; import ProfilePage from \"@/views/ProfilePage.vue\"; import CalendarPage from \"@/views/CalendarPage.vue\"; // \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0440\u043e\u0443\u0442\u0430\u043c\u0438 const routes = [ {path: \"/main\", component: MainPage}, {path: \"/event/:id\", component: EventPage}, {path: \"/signup\", component: SignUpPage}, {path: \"/signin\", component: SignInPage}, {path: \"/profile\", component: ProfilePage}, {path: \"/calendar\", component: CalendarPage} ] const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes }) // \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u043e\u0443\u0442\u0435\u0440 export default router stores index.js import { persist } from 'pinia-persists' import { createPinia } from 'pinia' const pinia = createPinia() pinia.use(persist()) export default pinia cards.js \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439, \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043e\u0434\u043d\u0443. import {defineStore} from 'pinia' import {cardApi} from '@/api' const useCardsStore = defineStore('cards', { state: () => ({ cards: [], }), actions: { async loadCards() { const response = await cardApi.getAll(); this.cards = response.data; return response; }, async loadOneCard(eventId) { return await cardApi.getOne(eventId) }, } } ) export default useCardsStore users.js \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e\u043b\u044c\u0437\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044e\u0437\u0435\u0440, \u0435\u0433\u043e \u0442\u043e\u043a\u0435\u043d \u0438 \u0435\u0433\u043e \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438. \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u044e\u0437\u0435\u0440\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u044e\u0437\u0435\u0440\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. import {defineStore} from 'pinia' import {userEventsApi, usersApi} from \"@/api\"; const useUsersStore = defineStore('users', { state: () => ({ user: {}, token: null, userEvents: [] }), actions: { async CurrentUser() { let response = null if (this.token) { response = await usersApi.fetchCurrentUser(this.token) this.user = response.data?.username ? response.data : {} console.log(this.user) } return this.user }, async login(credentials) { const response = await usersApi.login(credentials) this.token = response?.data?.auth_token || null if (this.token) { window.localStorage.setItem('user_token', this.token) } return this.token }, async signUp(user) { return await usersApi.signUp(user) }, async logout() { let response = null if (this.token) { response = await usersApi.logout(this.token) if (response.status === 204) { window.localStorage.removeItem('user_token') this.token = '' this.user = {} this.userEvents = [] } } return response }, async getUserEvents() { const response = await userEventsApi.getByUserId(this.user.id) this.userEvents = response.data console.log(this.userEvents) return response }, async addUserEvent(data) { return await userEventsApi.enrollUser(data) } } }) export default useUsersStore api index.js import instance from \"@/api/instance\" import CardApi from \"@/api/cards\" import UsersApi from \"@/api/users\" import UserEventsApi from \"@/api/userEvents\" const cardApi = new CardApi(instance) const usersApi = new UsersApi(instance) const userEventsApi = new UserEventsApi(instance) export { cardApi, usersApi, userEventsApi } instance.js import axios from 'axios' const apiURL = 'http://localhost:8000' const instance = axios.create({ baseURL: apiURL }) export default instance cards.js \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u043f\u043e id class CardApi { constructor(instance) { this.API = instance } getAll = async () => { return this.API({ url: '/api/events/list/' }) } getOne = async (eventId) => { return this.API({ url: `/api/event/${eventId}/` }) } } export default CardApi users.js \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0432\u0445\u043e\u0434\u0430, \u0432\u044b\u0445\u043e\u0434\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u044e\u0437\u0435\u0440\u0435 class UsersApi { constructor(instance) { this.API = instance } signUp = async (data) => { return this.API({ method: 'POST', url: '/auth/users/', data, headers: { 'Content-Type': 'multipart/form-data' } }) } login = async (data) => { return this.API({ method: 'POST', url: '/auth/token/login/', data, headers: { 'Content-Type': 'application/json' } }) } logout = async (token) => { return this.API({ method: 'POST', url: '/auth/token/logout/', headers: { 'Authorization': `Token ${token}` } }) } fetchCurrentUser = async (token) => { return this.API({ url: '/auth/users/me/', headers: { 'Authorization': `Token ${token}` } }) } } export default UsersApi userEvents.js \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435 class UserEventsApi { constructor(instance) { this.API = instance } getByUserId = async (userId) => { return this.API({ url: `/api/user/events/${userId}/` }) } enrollUser = async (data) => { return this.API({ url: '/api/enroll/create/', method: 'POST', data, headers: { 'Content-Type': 'application/json' } }) } } export default UserEventsApi components Card.vue <template> <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" display=\"none\"> <symbol id=\"ShowMore\" viewBox=\"0 0 16 16\"> <path d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\"/> </symbol> </svg> <img :src=\"img_src\" class=\"card-img-top mt-2\" style=\"height: 210px\" :alt=\"title\"> <div class=\"card-body d-flex flex-column\"> <p class=\"card-title\" style=\"font-size:18pt\"><b>{{ title }}</b></p> <p class=\"card-text\">{{ address }}</p> <p class=\"card-text\">{{ short_description }}</p> <button :id=\"'event_showmore_'+ id\" aria-pressed=\"true\" @click=\"goToEvent(id)\" class=\"btn mt-auto btn-dark purple_button event_showmore_btn\">Show more <svg class=\"icon\"> <use xlink:href=\"#ShowMore\"></use> </svg> </button> </div> </template> <script> export default { name: 'Event', props: { title: { type: String, required: true }, address: { type: String, required: true }, img_src: { type: String, required: true }, short_description: { type: String, required: true }, id: { type: Number, required: true } }, methods: { goToEvent(event_id) { this.$router.push(`/event/${event_id}`) }, }, } </script> <style scoped> </style> Event.vue <template> <main class=\"container-xl p-5 mb-5\"> <section class=\"row d-flex\" id=\"event_page\"> <h1 class=\"row mb-3 \">{{ title }}</h1> <div class=\"row d-flex col-lg-4 col-md-4 col-sm-4\"> <ul> <h5 class=\"text mt-2\">Address:</h5> <h5 class=\"text mt-2\">{{ address }}</h5> <h5 class=\"text mt-5\">Date:</h5> <h5 class=\"text mt-2\" id=\"date\"></h5> <h5 class=\"text mt-5\"><a :href=\"website\">Website</a></h5> </ul> </div> <div class=\"row d-flex col-lg-8 col-md-8 col-sm-8\"> <img class=\"align-self-end\" :src=\"img_src\" :alt=\"title\"> </div> <div class=\"mx-1 mb-5 mt-4\"> <button :id=\"'event_enroll'+ id\" class=\"btn mt-auto btn-dark purple_button\" :disabled=\"!isActive\" @click=\"enroll(this.id)\" aria-pressed=\"true\">Enroll </button> </div> <div class=\"card border-light mb-3 mx-auto\"> <div class=\"card-header\">Description</div> <div class=\"card-body\"> <h5 class=\"card-title\">{{ short_description }}</h5> <p class=\"card-text\">{{ full_description }}</p> </div> </div> </section> </main> </template> <script> import {mapActions, mapState} from \"pinia\"; import useUsersStore from \"@/stores/users\"; import moment from \"moment\"; export default { name: \"EventBlock\", props: { title: { type: String, required: true }, address: { type: String, required: true }, website: { type: String, required: true }, img_src: { type: String, required: true }, date: { type: String, required: true }, full_description: { type: String, required: true }, short_description: { type: String, required: true }, id: { type: Number, required: true } }, data() { return { isActive: true, } }, computed: { ...mapState(useUsersStore, ['user', 'token']), }, mounted() { this.convertDate() }, methods: { ...mapActions(useUsersStore, ['addUserEvent']), async enroll(id) { const userEvent = { \"event\": id, \"user\": this.user.username } console.log(userEvent) const response = await this.addUserEvent(userEvent); console.log(response) this.isActive = false }, convertDate() { let form_date = moment(this.date).utc().format('Do MMMM YYYY, HH:mm') console.log(form_date) document.getElementById('date').innerHTML=form_date return form_date }, } } </script> <style scoped> </style> Main.vue <template> <main class=\"container-xl p-5 mb-5\"> <h1 class=\"row mb-3 justify-content-center\">Events in Saint-Petersburg</h1> <div class=\"text-center\"> <img src=\"src/assets/img/spb.jpg\" class=\"rounded col-6\" alt=\"Photo of Saint-Petersburg\"> </div> <section class=\"filtration\" @change=\"filter\"> <div class=\"form text-center col-sm-6 col-lg-4 col-xl-3 mt-3 mx-auto\"> <select class=\"filter form-select-sm\" aria-label=\".form-select-sm example\" id=\"filter_by_type\"> <option selected>Event type</option> <option value=\"theater\">Theaters</option> <option value=\"concert\">Concerts</option> <option value=\"exhibition\">Exhibitions</option> <option value=\"activity\">Outdoor activities</option> <option value=\"festival\">Festivals</option> </select> </div> <div class=\"form text-center col-sm-6 col-lg-4 col-xl-3 mt-3 mx-auto\"> <select class=\"filter form-select-sm\" aria-label=\".form-select-sm example\" id=\"filter_by_place\"> <option selected>Choose district</option> <option value=\"admiralteysky\">Admiralteysky</option> <option value=\"petrogradsky\">Petrogradsky</option> <option value=\"moskovsky\">Moskovsky</option> <option value=\"tsentralny\">Tsentralny</option> <option value=\"vasileostrovsky\">Vasileostrovsky</option> </select> </div> </section> <section id=\"event_cards\" class=\"container justify-content-center row mx-auto mt-3\"> <div class=\"card event col-xl-4 col-lg-4 col-md-4 col-sm-6 card mx-3 mt-3\" :class=\"[card.district, card.type]\" v-for=\"card in Cards\" :key=\"card.id\"> <card :title=\"card.title\" :address=\"card.address\" :img_src=\"card.img_src\" :short_description=\"card.short_description\" :id=\"card.id\"></card> </div> </section> </main> </template> <script> import {mapActions, mapState} from \"pinia\"; import Card from \"@/components/Card.vue\" import useCardsStore from \"@/stores/cards.js\"; export default { name: \"MainBlock\", components: {Card}, computed: { ...mapState(useCardsStore, ['cards']), Cards() { return this.cards } }, methods: { ...mapActions(useCardsStore, ['loadCards']), async filter() { let selectedPlace = document.getElementById(\"filter_by_place\").value; let selectedType = document.getElementById(\"filter_by_type\").value; const cards = document.getElementsByClassName(\"event\"); console.log(cards) for (let i = 0; i < cards.length; i++) { if ((cards[i].classList.contains(selectedPlace) || selectedPlace === \"Choose district\") && (cards[i].classList.contains(selectedType) || selectedType === \"Event type\")) { cards[i].classList.remove(\"d-none\"); } else { cards[i].classList.add(\"d-none\"); } } console.log(cards) } }, mounted() { this.loadCards(); } } </script> <style scoped> </style> Profile.vue <template> <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" display=\"none\"> <symbol id=\"Edit\" viewBox=\"0 0 16 16\"> <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"/> <path d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"/> </symbol> <symbol id=\"Done\" viewBox=\"0 0 16 16\"> <path d=\"M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 0 1 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 0 1 1-11 0z\"/> <path d=\"M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l7-7z\"/> </symbol> </svg> <main class=\"container p-5 mb-5\"> <section id=\"user_profile\" class=\"container row mx-auto\"> <section> <div class=\"row d-flex col-md-5 col-lg-4 col-xl-4 col-sm-8\" style=\"float: left; margin-right: 10px\"> <img id=\"user_image\" :src=\"user.img_url\" alt=\"User image\" style=\"float: left; border-radius: 10%\"> <input v-show=\"upload_input\" type=\"file\" id=\"user_image\" accept=\"image/*\" @change=\"handleUpload\" ref=\"user_photo\"> </div> <div class=\"row d-flex col-xl-6 col-lg-8 col-md-8 col-sm-12\" style=\"float: none\"> <h1 id=\"user_name\" class=\"text\">{{ user.first_name }} {{ user.last_name }}</h1> <p id=\"user_login\" class=\"text\" style=\"font-size: 14pt\">{{ user.email }}</p> <p v-if=\"user.user_info === null\" id=\"user_info\" ref=\"info\" class=\"info text placeholder_text mt-1\">Tell something about yourself</p> <p v-else id=\"user_info\" ref=\"info\" class=\"info text placeholder_text\">{{ user.user_info }}</p> </div> </section> <div> <button class=\"btn btn-primary mx-1 mt-3\" type=\"button\" @click=\"edit\" id=\"edit-button\" ref=\"edit_btn\" aria-pressed=\"true\" :disabled=\"!isActive\">Edit profile <svg class=\"icon\"> <use xlink:href=\"#Edit\"></use> </svg> </button> <button class=\"btn btn-success invisible mt-3\" type=\"button\" @click=\"done\" ref=\"done_btn\" id=\"done-button\" aria-pressed=\"true\">Done <svg class=\"icon\"> <use xlink:href=\"#Done\"></use> </svg> </button> </div> <div> <button class=\"btn btn-secondary mt-3 mx-1\" @click=\"logout_btn\" type=\"button\" aria-pressed=\"true\">Logout </button> </div> </section> <section id=\"user_events\" class=\"container row mx-auto justify-content-center\"> <p class=\"text mt-4\" style=\"font-size: 20pt\"><b>Your events:</b></p> <div class=\"card event col-xl-4 col-lg-4 col-md-4 col-sm-6 card mx-3 mt-3\" v-for=\"event in Events\" :key=\"event.id\"> <card :title=\"event.title\" :address=\"event.address\" :img_src=\"event.img_src\" :short_description=\"event.short_description\" :id=\"event.id\"></card> </div> </section> </main> </template> <script> import {mapActions, mapState} from \"pinia\"; import useUsersStore from \"@/stores/users\"; import Card from \"@/components/Card.vue\"; export default { name: \"Profile\", components: {Card}, data() { return { isActive: true, upload_input: false, } }, computed: { ...mapState(useUsersStore, ['user', 'token', 'userEvents']), Events() { return this.userEvents } }, methods: { ...mapActions(useUsersStore, ['logout', 'CurrentUser', 'getUserEvents']), async logout_btn() { // window.localStorage.removeItem('user_token') await this.logout() this.$router.push('/signin') }, edit() { this.$refs[\"info\"].innerHTML = '' this.$refs[\"info\"].contentEditable = 'true' this.$refs[\"done_btn\"].classList.replace('invisible', 'visible') this.isActive = false this.upload_input = true }, async done() { this.$refs[\"info\"].contentEditable = 'false' this.$refs[\"info\"].classList.remove('placeholder_text') this.$refs[\"done_btn\"].classList.replace('visible', 'invisible') let user_input = this.$refs[\"info\"].innerHTML let image_input = this.$refs.user_photo.files[0] this.isActive = true this.upload_input = false if (image_input !== undefined) { let data = new FormData() data.append('image_url', image_input) const response = await fetch(`http://localhost:8000/api/user/edit/${this.user.id}/`, { method: \"PUT\", body: data, headers: { 'Content-Type': 'multipart/form-data' } }) console.log(response) console.log(this.user) } if (user_input === '') { } else { let user_input_send = {'user_info': `${user_input}`} const response = await fetch(`http://localhost:8000/api/user/edit/${this.user.id}/`, { method: \"PUT\", body: JSON.stringify(user_input_send), headers: { 'Content-Type': 'application/json' } }) console.log(response) } }, }, mounted() { this.CurrentUser().then(result => { if (!result?.username) { this.$router.replace({path: '/main'}) } this.getUserEvents() }) } } </script> <style scoped> </style> FullCalendar.vue <template> <div class=\"container p-5 mb-5\"> <full-calendar :options=\"calendarOptions\"/> </div> </template> <script> import FullCalendar from '@fullcalendar/vue3' import dayGridPlugin from '@fullcalendar/daygrid' import interactionPlugin from '@fullcalendar/interaction' const DEFAULT_OPTIONS = { plugins: [dayGridPlugin, interactionPlugin], initialView: 'dayGridMonth', editable: true, timeZone: 'UTC', eventTimeFormat: { hour: '2-digit', minute: '2-digit', meridiem: false, hour12: false, } } export default { components: { FullCalendar }, props: { options: { type: Object, default: DEFAULT_OPTIONS, } }, computed: { calendarOptions() { return {...DEFAULT_OPTIONS, ...this.options} } } } </script> <style> .fc-event-title { white-space: normal; margin-left: 5px; } </style> Signin.vue <template> <main class=\"container-xl p-5 mb-5\"> <h1 class=\"row mb-4 mt-4 justify-content-center\">Sign in</h1> <form> <div class=\"form-floating\"> <div class=\"row mt-3 justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"username\" type=\"text\" class=\"form-control\" name=\"username\" placeholder=\"Username\" id=\"floatingUsername\" required> <label for=\"floatingUsername\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4 text-center\"> <input v-model=\"password\" type=\"password\" class=\"form-control\" name=\"password\" id=\"floatingPassword\" placeholder=\"Password\" required> <label for=\"floatingPassword\"></label> </div> </div> </div> <p v-if=\"err\" class=\"login-error text-danger text-center\"> <strong>{{ err }}</strong> </p> <div class=\"row justify-content-center\"> <div class=\"col-xl-1 col-lg-1 col-md-2 col-sm-2 text-center\"> <button type=\"button\" @click=\"signin\" class=\"btn btn-primary\" aria-pressed=\"true\" id=\"register\">Login</button> </div> </div> </form> <div class=\"row mt-3\"> <router-link to=\"/signup\">Register</router-link> </div> </main> </template> <script> import {mapActions} from \"pinia\"; import useUsersStore from \"@/stores/users\"; export default { name: \"Signin\", data() { return { username: \"\", password: \"\", err: \"\" }; }, methods: { ...mapActions(useUsersStore, ['login']), async signin() { this.err = '' if (!this.username || !this.password) { this.err = 'Error! Enter username and password!' return } try { await this.login({ username: this.username, password: this.password }) } catch (e) { this.err = 'Wrong password or username! Try again!' return } this.$router.push('/main') } } } </script> <style scoped> </style> Signup.vue <template> <main class=\"container-xl p-5 mb-5\"> <h1 class=\"row mb-4 mt-4 justify-content-center\">Sign up</h1> <form class=\"signup-form\" action=\"http://localhost:8000/api/users/list\" method=\"POST\"> <div class=\"form-floating\"> <div class=\"row mt-3 justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"username\" type=\"text\" class=\"form-control\" name=\"username\" placeholder=\"Username\" id=\"floatingUsername\" required> <label for=\"floatingUsername\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"first_name\" type=\"text\" class=\"form-control\" name=\"first_name\" placeholder=\"First name\" id=\"floatingName\" required> <label for=\"floatingName\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"last_name\" type=\"text\" class=\"form-control\" name=\"last_name\" placeholder=\"Last name\" id=\"floatingLastname\" required> <label for=\"floatingLastname\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"email\" type=\"text\" class=\"form-control\" name=\"email\" placeholder=\"Email\" id=\"floatingEmail\" required> <label for=\"floatingEmail\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4 text-center\"> <input v-model=\"password\" type=\"password\" class=\"form-control\" name=\"password\" id=\"floatingPassword\" placeholder=\"Password\" required> <label for=\"floatingPassword\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input @change=\"uploadFile\" ref=\"file\" type=\"file\" class=\"form-control\" name=\"img_url\" placeholder=\"Place your profile image url\" id=\"floatingImage\"> <label for=\"floatingImage\"></label> </div> </div> </div> <p v-if=\"err\" class=\"login-error text-danger text-center\"> <strong>{{ err }}</strong> </p> <div class=\"row justify-content-center\"> <div class=\"col-xl-1 col-lg-1 col-md-2 col-sm-2 text-center\"> <button type=\"button\" @click=\"signup\" class=\"btn btn-primary\" aria-pressed=\"true\" id=\"register\">Register</button> </div> </div> </form> </main> </template> <script> import useUsersStore from \"@/stores/users\"; import {mapActions} from \"pinia\"; export default { name: \"Signup\", data() { return { username: \"\", password: \"\", first_name: \"\", last_name: \"\", email: \"\", img_url: null, err: \"\" }; }, methods: { ...mapActions(useUsersStore, ['signUp', 'login']), uploadFile() { this.img_url = this.$refs.file.files[0]; }, async signup() { this.err = '' if (!this.email || !this.password || !this.username || !this.first_name || !this.last_name) { this.err = 'Error! Fill in required fields!' return } let result = null try { result = await this.signUp({ username: this.username, first_name: this.first_name, last_name: this.last_name, email: this.email, password: this.password, img_url: this.img_url }) } catch (e) { this.err = 'Error!' return } if (result?.status === 201) { await this.login({ username: this.username, password: this.password }) this.$router.push('/main') } } } } </script> <style scoped> </style> Header.vue <template> <header class=\"container-fluid\"> <nav class=\"navbar navbar-expand-md\"> <div class=\"container-fluid\"> <button class=\"navbar-toggler\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbar\" id=\"Menu_btn\" aria-label=\"Menu\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbar\"> <ul class=\"navbar-nav\"> <li class=\"nav-item\"> <router-link class=\"nav-link active\" to=\"/main\">Main</router-link> </li> <li class=\"nav-item signinup_link\"> <router-link class=\"nav-link active\" to=\"/signin\">Sign in</router-link> </li> <li class=\"nav-item signinup_link\"> <router-link class=\"nav-link active\" to=\"/signup\">Sign up</router-link> </li> <li class=\"nav-item profile_link\"> <router-link class=\"nav-link active\" to=\"/profile\">Profile</router-link> </li> <li class=\"nav-item profile_link\"> <router-link class=\"nav-link active\" to=\"/calendar\">Calendar</router-link> </li> </ul> </div> </div> </nav> </header> </template> <script> export default { name: \"HeaderBlock\", methods: { show_menu() { let token = localStorage.getItem('user_token') console.log(token) if (token !== null) { let menu_items = document.getElementsByClassName(\"signinup_link\") while (menu_items.length > 0) { menu_items.item(0).parentNode.removeChild(menu_items.item(0)) } } else { let menu_items = document.getElementsByClassName(\"profile_link\") while (menu_items.length > 0) { menu_items.item(0).parentNode.removeChild(menu_items.item(0)) } } } }, mounted() { this.show_menu() } } </script> <style scoped> </style> Footer.vue <template> <footer> <p>&copy 2022, Konik Anastasia</p> </footer> </template> <script> export default { name: \"FooterBlock\" } </script> <style scoped> </style> views MainPage.vue <template> <header-block /> <main-block /> <footer-block /> </template> <script> import { mapActions, mapState } from 'pinia' import useCardsStore from '@/stores/cards' import HeaderBlock from '@/components/Header.vue' import MainBlock from '@/components/Main.vue' import FooterBlock from '@/components/Footer.vue' export default{ name: 'MainPage', components: { HeaderBlock, MainBlock, FooterBlock }, computed: { ...mapState(useCardsStore, ['cards']) }, methods: { ...mapActions(useCardsStore, ['loadCards']), }, } </script> EventPage.vue <template> <header-block/> <event-block :address=\"cards[parseInt($route.params.id) - 1].address\" :date=\"cards[parseInt($route.params.id) -1].date\" :full_description=\"cards[parseInt($route.params.id) - 1].full_description\" :id=\"cards[parseInt($route.params.id) - 1].id\" :img_src=\"cards[parseInt($route.params.id) - 1 ].img_src\" :short_description=\"cards[parseInt($route.params.id)- 1].short_description\" :title=\"cards[parseInt($route.params.id) - 1].title\" :website=\"cards[parseInt($route.params.id) - 1].website\"/> <footer-block/> </template> <script> import {mapActions, mapState} from 'pinia' import HeaderBlock from '../components/Header.vue' import EventBlock from '../components/Event.vue' import FooterBlock from '../components/Footer.vue' import {useRoute} from \"vue-router\"; import useUsersStore from \"@/stores/users\"; import useCardsStore from \"@/stores/cards\"; export default { name: 'EventPage', components: {HeaderBlock, EventBlock, FooterBlock}, computed: { ...mapState(useUsersStore, ['user', 'token']), ...mapState(useCardsStore, [\"cards\"]), EventId() { const route = useRoute(); return parseInt(route.params.id) } }, methods: { ...mapActions(useUsersStore, ['addUserEvent']), ...mapActions(useCardsStore, ['loadOneCard']), }, mounted() { this.loadOneCard(this.EventId); } } </script> ProfilePage.vue <template> <header-block/> <user-block/> <footer-block/> </template> <script> import HeaderBlock from \"@/components/Header.vue\"; import FooterBlock from \"@/components/Footer.vue\"; import UserBlock from \"@/components/Profile.vue\"; import useUsersStore from \"@/stores/users\"; import {mapActions, mapState} from \"pinia\"; export default { name: \"ProfilePage\", components: {FooterBlock, UserBlock, HeaderBlock}, computed: { ...mapState(useUsersStore, ['user', 'token', 'userEvents']), }, methods: { ...mapActions(useUsersStore, ['logout', 'CurrentUser']), } } </script> <style scoped> </style> SignInPage.vue <template> <header-block/> <signin-block/> <footer-block/> </template> <script> import HeaderBlock from \"@/components/Header.vue\"; import SigninBlock from \"@/components/Signin.vue\"; import FooterBlock from \"@/components/Footer.vue\"; import {mapActions, mapState} from \"pinia\"; import useUsersStore from \"@/stores/users\"; export default { name: \"SignInPage\", components: {HeaderBlock, SigninBlock, FooterBlock}, computed: { ...mapState(useUsersStore, ['user']) }, methods: { ...mapActions(useUsersStore, ['login']) } } </script> <style scoped> </style> SignupPage.vue <template> <header-block/> <signup-block/> <footer-block/> </template> <script> import HeaderBlock from \"@/components/Header.vue\"; import FooterBlock from \"@/components/Footer.vue\"; import SignupBlock from \"@/components/Signup.vue\"; import {mapActions, mapState} from \"pinia\"; import useUsersStore from \"@/stores/users\"; export default { name: \"SignUpPage\", components: {HeaderBlock, SignupBlock, FooterBlock}, computed: { ...mapState(useUsersStore, ['user']) }, methods: { ...mapActions(useUsersStore, ['login, signUp']) } } </script> <style scoped> </style> CalendarPage.vue <template> <header-block/> <full-calendar :options=\"{ events: userEvents, }\" /> <footer-block/> </template> <script> import HeaderBlock from \"@/components/Header.vue\"; import FullCalendar from \"@/components/FullCalendar.vue\"; import FooterBlock from \"@/components/Footer.vue\"; import useUsersStore from \"@/stores/users\"; import {mapActions, mapState} from \"pinia\"; export default { name: \"CalendarPage\", components: {FooterBlock, FullCalendar, HeaderBlock}, computed: { ...mapState(useUsersStore, ['userEvents']) }, methods: { ...mapActions(useUsersStore, ['getUserEvents']) }, mounted() { this.getUserEvents() } } </script> <style scoped> </style> \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0437 \u0441\u0430\u0439\u0442\u0430:","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"lr4/#no4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"lr4/#vuejs","text":"\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0414\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d \u0440\u043e\u0443\u0442\u0435\u0440 \u0414\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c API \u0420\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430: router index.js import {createRouter, createWebHistory} from 'vue-router' import MainPage from \"@/views/MainPage.vue\"; import EventPage from \"@/views/EventPage.vue\"; import SignUpPage from \"@/views/SignUpPage.vue\"; import SignInPage from \"@/views/SignInPage.vue\"; import ProfilePage from \"@/views/ProfilePage.vue\"; import CalendarPage from \"@/views/CalendarPage.vue\"; // \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0440\u043e\u0443\u0442\u0430\u043c\u0438 const routes = [ {path: \"/main\", component: MainPage}, {path: \"/event/:id\", component: EventPage}, {path: \"/signup\", component: SignUpPage}, {path: \"/signin\", component: SignInPage}, {path: \"/profile\", component: ProfilePage}, {path: \"/calendar\", component: CalendarPage} ] const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes }) // \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u043e\u0443\u0442\u0435\u0440 export default router stores index.js import { persist } from 'pinia-persists' import { createPinia } from 'pinia' const pinia = createPinia() pinia.use(persist()) export default pinia cards.js \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439, \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043e\u0434\u043d\u0443. import {defineStore} from 'pinia' import {cardApi} from '@/api' const useCardsStore = defineStore('cards', { state: () => ({ cards: [], }), actions: { async loadCards() { const response = await cardApi.getAll(); this.cards = response.data; return response; }, async loadOneCard(eventId) { return await cardApi.getOne(eventId) }, } } ) export default useCardsStore users.js \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e\u043b\u044c\u0437\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044e\u0437\u0435\u0440, \u0435\u0433\u043e \u0442\u043e\u043a\u0435\u043d \u0438 \u0435\u0433\u043e \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438. \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u044e\u0437\u0435\u0440\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u044e\u0437\u0435\u0440\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. import {defineStore} from 'pinia' import {userEventsApi, usersApi} from \"@/api\"; const useUsersStore = defineStore('users', { state: () => ({ user: {}, token: null, userEvents: [] }), actions: { async CurrentUser() { let response = null if (this.token) { response = await usersApi.fetchCurrentUser(this.token) this.user = response.data?.username ? response.data : {} console.log(this.user) } return this.user }, async login(credentials) { const response = await usersApi.login(credentials) this.token = response?.data?.auth_token || null if (this.token) { window.localStorage.setItem('user_token', this.token) } return this.token }, async signUp(user) { return await usersApi.signUp(user) }, async logout() { let response = null if (this.token) { response = await usersApi.logout(this.token) if (response.status === 204) { window.localStorage.removeItem('user_token') this.token = '' this.user = {} this.userEvents = [] } } return response }, async getUserEvents() { const response = await userEventsApi.getByUserId(this.user.id) this.userEvents = response.data console.log(this.userEvents) return response }, async addUserEvent(data) { return await userEventsApi.enrollUser(data) } } }) export default useUsersStore api index.js import instance from \"@/api/instance\" import CardApi from \"@/api/cards\" import UsersApi from \"@/api/users\" import UserEventsApi from \"@/api/userEvents\" const cardApi = new CardApi(instance) const usersApi = new UsersApi(instance) const userEventsApi = new UserEventsApi(instance) export { cardApi, usersApi, userEventsApi } instance.js import axios from 'axios' const apiURL = 'http://localhost:8000' const instance = axios.create({ baseURL: apiURL }) export default instance cards.js \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u0438 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u043f\u043e id class CardApi { constructor(instance) { this.API = instance } getAll = async () => { return this.API({ url: '/api/events/list/' }) } getOne = async (eventId) => { return this.API({ url: `/api/event/${eventId}/` }) } } export default CardApi users.js \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0432\u0445\u043e\u0434\u0430, \u0432\u044b\u0445\u043e\u0434\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u044e\u0437\u0435\u0440\u0435 class UsersApi { constructor(instance) { this.API = instance } signUp = async (data) => { return this.API({ method: 'POST', url: '/auth/users/', data, headers: { 'Content-Type': 'multipart/form-data' } }) } login = async (data) => { return this.API({ method: 'POST', url: '/auth/token/login/', data, headers: { 'Content-Type': 'application/json' } }) } logout = async (token) => { return this.API({ method: 'POST', url: '/auth/token/logout/', headers: { 'Authorization': `Token ${token}` } }) } fetchCurrentUser = async (token) => { return this.API({ url: '/auth/users/me/', headers: { 'Authorization': `Token ${token}` } }) } } export default UsersApi userEvents.js \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435 class UserEventsApi { constructor(instance) { this.API = instance } getByUserId = async (userId) => { return this.API({ url: `/api/user/events/${userId}/` }) } enrollUser = async (data) => { return this.API({ url: '/api/enroll/create/', method: 'POST', data, headers: { 'Content-Type': 'application/json' } }) } } export default UserEventsApi components Card.vue <template> <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" display=\"none\"> <symbol id=\"ShowMore\" viewBox=\"0 0 16 16\"> <path d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\"/> </symbol> </svg> <img :src=\"img_src\" class=\"card-img-top mt-2\" style=\"height: 210px\" :alt=\"title\"> <div class=\"card-body d-flex flex-column\"> <p class=\"card-title\" style=\"font-size:18pt\"><b>{{ title }}</b></p> <p class=\"card-text\">{{ address }}</p> <p class=\"card-text\">{{ short_description }}</p> <button :id=\"'event_showmore_'+ id\" aria-pressed=\"true\" @click=\"goToEvent(id)\" class=\"btn mt-auto btn-dark purple_button event_showmore_btn\">Show more <svg class=\"icon\"> <use xlink:href=\"#ShowMore\"></use> </svg> </button> </div> </template> <script> export default { name: 'Event', props: { title: { type: String, required: true }, address: { type: String, required: true }, img_src: { type: String, required: true }, short_description: { type: String, required: true }, id: { type: Number, required: true } }, methods: { goToEvent(event_id) { this.$router.push(`/event/${event_id}`) }, }, } </script> <style scoped> </style> Event.vue <template> <main class=\"container-xl p-5 mb-5\"> <section class=\"row d-flex\" id=\"event_page\"> <h1 class=\"row mb-3 \">{{ title }}</h1> <div class=\"row d-flex col-lg-4 col-md-4 col-sm-4\"> <ul> <h5 class=\"text mt-2\">Address:</h5> <h5 class=\"text mt-2\">{{ address }}</h5> <h5 class=\"text mt-5\">Date:</h5> <h5 class=\"text mt-2\" id=\"date\"></h5> <h5 class=\"text mt-5\"><a :href=\"website\">Website</a></h5> </ul> </div> <div class=\"row d-flex col-lg-8 col-md-8 col-sm-8\"> <img class=\"align-self-end\" :src=\"img_src\" :alt=\"title\"> </div> <div class=\"mx-1 mb-5 mt-4\"> <button :id=\"'event_enroll'+ id\" class=\"btn mt-auto btn-dark purple_button\" :disabled=\"!isActive\" @click=\"enroll(this.id)\" aria-pressed=\"true\">Enroll </button> </div> <div class=\"card border-light mb-3 mx-auto\"> <div class=\"card-header\">Description</div> <div class=\"card-body\"> <h5 class=\"card-title\">{{ short_description }}</h5> <p class=\"card-text\">{{ full_description }}</p> </div> </div> </section> </main> </template> <script> import {mapActions, mapState} from \"pinia\"; import useUsersStore from \"@/stores/users\"; import moment from \"moment\"; export default { name: \"EventBlock\", props: { title: { type: String, required: true }, address: { type: String, required: true }, website: { type: String, required: true }, img_src: { type: String, required: true }, date: { type: String, required: true }, full_description: { type: String, required: true }, short_description: { type: String, required: true }, id: { type: Number, required: true } }, data() { return { isActive: true, } }, computed: { ...mapState(useUsersStore, ['user', 'token']), }, mounted() { this.convertDate() }, methods: { ...mapActions(useUsersStore, ['addUserEvent']), async enroll(id) { const userEvent = { \"event\": id, \"user\": this.user.username } console.log(userEvent) const response = await this.addUserEvent(userEvent); console.log(response) this.isActive = false }, convertDate() { let form_date = moment(this.date).utc().format('Do MMMM YYYY, HH:mm') console.log(form_date) document.getElementById('date').innerHTML=form_date return form_date }, } } </script> <style scoped> </style> Main.vue <template> <main class=\"container-xl p-5 mb-5\"> <h1 class=\"row mb-3 justify-content-center\">Events in Saint-Petersburg</h1> <div class=\"text-center\"> <img src=\"src/assets/img/spb.jpg\" class=\"rounded col-6\" alt=\"Photo of Saint-Petersburg\"> </div> <section class=\"filtration\" @change=\"filter\"> <div class=\"form text-center col-sm-6 col-lg-4 col-xl-3 mt-3 mx-auto\"> <select class=\"filter form-select-sm\" aria-label=\".form-select-sm example\" id=\"filter_by_type\"> <option selected>Event type</option> <option value=\"theater\">Theaters</option> <option value=\"concert\">Concerts</option> <option value=\"exhibition\">Exhibitions</option> <option value=\"activity\">Outdoor activities</option> <option value=\"festival\">Festivals</option> </select> </div> <div class=\"form text-center col-sm-6 col-lg-4 col-xl-3 mt-3 mx-auto\"> <select class=\"filter form-select-sm\" aria-label=\".form-select-sm example\" id=\"filter_by_place\"> <option selected>Choose district</option> <option value=\"admiralteysky\">Admiralteysky</option> <option value=\"petrogradsky\">Petrogradsky</option> <option value=\"moskovsky\">Moskovsky</option> <option value=\"tsentralny\">Tsentralny</option> <option value=\"vasileostrovsky\">Vasileostrovsky</option> </select> </div> </section> <section id=\"event_cards\" class=\"container justify-content-center row mx-auto mt-3\"> <div class=\"card event col-xl-4 col-lg-4 col-md-4 col-sm-6 card mx-3 mt-3\" :class=\"[card.district, card.type]\" v-for=\"card in Cards\" :key=\"card.id\"> <card :title=\"card.title\" :address=\"card.address\" :img_src=\"card.img_src\" :short_description=\"card.short_description\" :id=\"card.id\"></card> </div> </section> </main> </template> <script> import {mapActions, mapState} from \"pinia\"; import Card from \"@/components/Card.vue\" import useCardsStore from \"@/stores/cards.js\"; export default { name: \"MainBlock\", components: {Card}, computed: { ...mapState(useCardsStore, ['cards']), Cards() { return this.cards } }, methods: { ...mapActions(useCardsStore, ['loadCards']), async filter() { let selectedPlace = document.getElementById(\"filter_by_place\").value; let selectedType = document.getElementById(\"filter_by_type\").value; const cards = document.getElementsByClassName(\"event\"); console.log(cards) for (let i = 0; i < cards.length; i++) { if ((cards[i].classList.contains(selectedPlace) || selectedPlace === \"Choose district\") && (cards[i].classList.contains(selectedType) || selectedType === \"Event type\")) { cards[i].classList.remove(\"d-none\"); } else { cards[i].classList.add(\"d-none\"); } } console.log(cards) } }, mounted() { this.loadCards(); } } </script> <style scoped> </style> Profile.vue <template> <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" display=\"none\"> <symbol id=\"Edit\" viewBox=\"0 0 16 16\"> <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"/> <path d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"/> </symbol> <symbol id=\"Done\" viewBox=\"0 0 16 16\"> <path d=\"M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 0 1 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 0 1 1-11 0z\"/> <path d=\"M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l7-7z\"/> </symbol> </svg> <main class=\"container p-5 mb-5\"> <section id=\"user_profile\" class=\"container row mx-auto\"> <section> <div class=\"row d-flex col-md-5 col-lg-4 col-xl-4 col-sm-8\" style=\"float: left; margin-right: 10px\"> <img id=\"user_image\" :src=\"user.img_url\" alt=\"User image\" style=\"float: left; border-radius: 10%\"> <input v-show=\"upload_input\" type=\"file\" id=\"user_image\" accept=\"image/*\" @change=\"handleUpload\" ref=\"user_photo\"> </div> <div class=\"row d-flex col-xl-6 col-lg-8 col-md-8 col-sm-12\" style=\"float: none\"> <h1 id=\"user_name\" class=\"text\">{{ user.first_name }} {{ user.last_name }}</h1> <p id=\"user_login\" class=\"text\" style=\"font-size: 14pt\">{{ user.email }}</p> <p v-if=\"user.user_info === null\" id=\"user_info\" ref=\"info\" class=\"info text placeholder_text mt-1\">Tell something about yourself</p> <p v-else id=\"user_info\" ref=\"info\" class=\"info text placeholder_text\">{{ user.user_info }}</p> </div> </section> <div> <button class=\"btn btn-primary mx-1 mt-3\" type=\"button\" @click=\"edit\" id=\"edit-button\" ref=\"edit_btn\" aria-pressed=\"true\" :disabled=\"!isActive\">Edit profile <svg class=\"icon\"> <use xlink:href=\"#Edit\"></use> </svg> </button> <button class=\"btn btn-success invisible mt-3\" type=\"button\" @click=\"done\" ref=\"done_btn\" id=\"done-button\" aria-pressed=\"true\">Done <svg class=\"icon\"> <use xlink:href=\"#Done\"></use> </svg> </button> </div> <div> <button class=\"btn btn-secondary mt-3 mx-1\" @click=\"logout_btn\" type=\"button\" aria-pressed=\"true\">Logout </button> </div> </section> <section id=\"user_events\" class=\"container row mx-auto justify-content-center\"> <p class=\"text mt-4\" style=\"font-size: 20pt\"><b>Your events:</b></p> <div class=\"card event col-xl-4 col-lg-4 col-md-4 col-sm-6 card mx-3 mt-3\" v-for=\"event in Events\" :key=\"event.id\"> <card :title=\"event.title\" :address=\"event.address\" :img_src=\"event.img_src\" :short_description=\"event.short_description\" :id=\"event.id\"></card> </div> </section> </main> </template> <script> import {mapActions, mapState} from \"pinia\"; import useUsersStore from \"@/stores/users\"; import Card from \"@/components/Card.vue\"; export default { name: \"Profile\", components: {Card}, data() { return { isActive: true, upload_input: false, } }, computed: { ...mapState(useUsersStore, ['user', 'token', 'userEvents']), Events() { return this.userEvents } }, methods: { ...mapActions(useUsersStore, ['logout', 'CurrentUser', 'getUserEvents']), async logout_btn() { // window.localStorage.removeItem('user_token') await this.logout() this.$router.push('/signin') }, edit() { this.$refs[\"info\"].innerHTML = '' this.$refs[\"info\"].contentEditable = 'true' this.$refs[\"done_btn\"].classList.replace('invisible', 'visible') this.isActive = false this.upload_input = true }, async done() { this.$refs[\"info\"].contentEditable = 'false' this.$refs[\"info\"].classList.remove('placeholder_text') this.$refs[\"done_btn\"].classList.replace('visible', 'invisible') let user_input = this.$refs[\"info\"].innerHTML let image_input = this.$refs.user_photo.files[0] this.isActive = true this.upload_input = false if (image_input !== undefined) { let data = new FormData() data.append('image_url', image_input) const response = await fetch(`http://localhost:8000/api/user/edit/${this.user.id}/`, { method: \"PUT\", body: data, headers: { 'Content-Type': 'multipart/form-data' } }) console.log(response) console.log(this.user) } if (user_input === '') { } else { let user_input_send = {'user_info': `${user_input}`} const response = await fetch(`http://localhost:8000/api/user/edit/${this.user.id}/`, { method: \"PUT\", body: JSON.stringify(user_input_send), headers: { 'Content-Type': 'application/json' } }) console.log(response) } }, }, mounted() { this.CurrentUser().then(result => { if (!result?.username) { this.$router.replace({path: '/main'}) } this.getUserEvents() }) } } </script> <style scoped> </style> FullCalendar.vue <template> <div class=\"container p-5 mb-5\"> <full-calendar :options=\"calendarOptions\"/> </div> </template> <script> import FullCalendar from '@fullcalendar/vue3' import dayGridPlugin from '@fullcalendar/daygrid' import interactionPlugin from '@fullcalendar/interaction' const DEFAULT_OPTIONS = { plugins: [dayGridPlugin, interactionPlugin], initialView: 'dayGridMonth', editable: true, timeZone: 'UTC', eventTimeFormat: { hour: '2-digit', minute: '2-digit', meridiem: false, hour12: false, } } export default { components: { FullCalendar }, props: { options: { type: Object, default: DEFAULT_OPTIONS, } }, computed: { calendarOptions() { return {...DEFAULT_OPTIONS, ...this.options} } } } </script> <style> .fc-event-title { white-space: normal; margin-left: 5px; } </style> Signin.vue <template> <main class=\"container-xl p-5 mb-5\"> <h1 class=\"row mb-4 mt-4 justify-content-center\">Sign in</h1> <form> <div class=\"form-floating\"> <div class=\"row mt-3 justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"username\" type=\"text\" class=\"form-control\" name=\"username\" placeholder=\"Username\" id=\"floatingUsername\" required> <label for=\"floatingUsername\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4 text-center\"> <input v-model=\"password\" type=\"password\" class=\"form-control\" name=\"password\" id=\"floatingPassword\" placeholder=\"Password\" required> <label for=\"floatingPassword\"></label> </div> </div> </div> <p v-if=\"err\" class=\"login-error text-danger text-center\"> <strong>{{ err }}</strong> </p> <div class=\"row justify-content-center\"> <div class=\"col-xl-1 col-lg-1 col-md-2 col-sm-2 text-center\"> <button type=\"button\" @click=\"signin\" class=\"btn btn-primary\" aria-pressed=\"true\" id=\"register\">Login</button> </div> </div> </form> <div class=\"row mt-3\"> <router-link to=\"/signup\">Register</router-link> </div> </main> </template> <script> import {mapActions} from \"pinia\"; import useUsersStore from \"@/stores/users\"; export default { name: \"Signin\", data() { return { username: \"\", password: \"\", err: \"\" }; }, methods: { ...mapActions(useUsersStore, ['login']), async signin() { this.err = '' if (!this.username || !this.password) { this.err = 'Error! Enter username and password!' return } try { await this.login({ username: this.username, password: this.password }) } catch (e) { this.err = 'Wrong password or username! Try again!' return } this.$router.push('/main') } } } </script> <style scoped> </style> Signup.vue <template> <main class=\"container-xl p-5 mb-5\"> <h1 class=\"row mb-4 mt-4 justify-content-center\">Sign up</h1> <form class=\"signup-form\" action=\"http://localhost:8000/api/users/list\" method=\"POST\"> <div class=\"form-floating\"> <div class=\"row mt-3 justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"username\" type=\"text\" class=\"form-control\" name=\"username\" placeholder=\"Username\" id=\"floatingUsername\" required> <label for=\"floatingUsername\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"first_name\" type=\"text\" class=\"form-control\" name=\"first_name\" placeholder=\"First name\" id=\"floatingName\" required> <label for=\"floatingName\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"last_name\" type=\"text\" class=\"form-control\" name=\"last_name\" placeholder=\"Last name\" id=\"floatingLastname\" required> <label for=\"floatingLastname\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input v-model=\"email\" type=\"text\" class=\"form-control\" name=\"email\" placeholder=\"Email\" id=\"floatingEmail\" required> <label for=\"floatingEmail\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4 text-center\"> <input v-model=\"password\" type=\"password\" class=\"form-control\" name=\"password\" id=\"floatingPassword\" placeholder=\"Password\" required> <label for=\"floatingPassword\"></label> </div> </div> </div> <div class=\"form-floating\"> <div class=\"row justify-content-center\"> <div class=\"col-sm-3 col-md-4\"> <input @change=\"uploadFile\" ref=\"file\" type=\"file\" class=\"form-control\" name=\"img_url\" placeholder=\"Place your profile image url\" id=\"floatingImage\"> <label for=\"floatingImage\"></label> </div> </div> </div> <p v-if=\"err\" class=\"login-error text-danger text-center\"> <strong>{{ err }}</strong> </p> <div class=\"row justify-content-center\"> <div class=\"col-xl-1 col-lg-1 col-md-2 col-sm-2 text-center\"> <button type=\"button\" @click=\"signup\" class=\"btn btn-primary\" aria-pressed=\"true\" id=\"register\">Register</button> </div> </div> </form> </main> </template> <script> import useUsersStore from \"@/stores/users\"; import {mapActions} from \"pinia\"; export default { name: \"Signup\", data() { return { username: \"\", password: \"\", first_name: \"\", last_name: \"\", email: \"\", img_url: null, err: \"\" }; }, methods: { ...mapActions(useUsersStore, ['signUp', 'login']), uploadFile() { this.img_url = this.$refs.file.files[0]; }, async signup() { this.err = '' if (!this.email || !this.password || !this.username || !this.first_name || !this.last_name) { this.err = 'Error! Fill in required fields!' return } let result = null try { result = await this.signUp({ username: this.username, first_name: this.first_name, last_name: this.last_name, email: this.email, password: this.password, img_url: this.img_url }) } catch (e) { this.err = 'Error!' return } if (result?.status === 201) { await this.login({ username: this.username, password: this.password }) this.$router.push('/main') } } } } </script> <style scoped> </style> Header.vue <template> <header class=\"container-fluid\"> <nav class=\"navbar navbar-expand-md\"> <div class=\"container-fluid\"> <button class=\"navbar-toggler\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbar\" id=\"Menu_btn\" aria-label=\"Menu\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbar\"> <ul class=\"navbar-nav\"> <li class=\"nav-item\"> <router-link class=\"nav-link active\" to=\"/main\">Main</router-link> </li> <li class=\"nav-item signinup_link\"> <router-link class=\"nav-link active\" to=\"/signin\">Sign in</router-link> </li> <li class=\"nav-item signinup_link\"> <router-link class=\"nav-link active\" to=\"/signup\">Sign up</router-link> </li> <li class=\"nav-item profile_link\"> <router-link class=\"nav-link active\" to=\"/profile\">Profile</router-link> </li> <li class=\"nav-item profile_link\"> <router-link class=\"nav-link active\" to=\"/calendar\">Calendar</router-link> </li> </ul> </div> </div> </nav> </header> </template> <script> export default { name: \"HeaderBlock\", methods: { show_menu() { let token = localStorage.getItem('user_token') console.log(token) if (token !== null) { let menu_items = document.getElementsByClassName(\"signinup_link\") while (menu_items.length > 0) { menu_items.item(0).parentNode.removeChild(menu_items.item(0)) } } else { let menu_items = document.getElementsByClassName(\"profile_link\") while (menu_items.length > 0) { menu_items.item(0).parentNode.removeChild(menu_items.item(0)) } } } }, mounted() { this.show_menu() } } </script> <style scoped> </style> Footer.vue <template> <footer> <p>&copy 2022, Konik Anastasia</p> </footer> </template> <script> export default { name: \"FooterBlock\" } </script> <style scoped> </style> views MainPage.vue <template> <header-block /> <main-block /> <footer-block /> </template> <script> import { mapActions, mapState } from 'pinia' import useCardsStore from '@/stores/cards' import HeaderBlock from '@/components/Header.vue' import MainBlock from '@/components/Main.vue' import FooterBlock from '@/components/Footer.vue' export default{ name: 'MainPage', components: { HeaderBlock, MainBlock, FooterBlock }, computed: { ...mapState(useCardsStore, ['cards']) }, methods: { ...mapActions(useCardsStore, ['loadCards']), }, } </script> EventPage.vue <template> <header-block/> <event-block :address=\"cards[parseInt($route.params.id) - 1].address\" :date=\"cards[parseInt($route.params.id) -1].date\" :full_description=\"cards[parseInt($route.params.id) - 1].full_description\" :id=\"cards[parseInt($route.params.id) - 1].id\" :img_src=\"cards[parseInt($route.params.id) - 1 ].img_src\" :short_description=\"cards[parseInt($route.params.id)- 1].short_description\" :title=\"cards[parseInt($route.params.id) - 1].title\" :website=\"cards[parseInt($route.params.id) - 1].website\"/> <footer-block/> </template> <script> import {mapActions, mapState} from 'pinia' import HeaderBlock from '../components/Header.vue' import EventBlock from '../components/Event.vue' import FooterBlock from '../components/Footer.vue' import {useRoute} from \"vue-router\"; import useUsersStore from \"@/stores/users\"; import useCardsStore from \"@/stores/cards\"; export default { name: 'EventPage', components: {HeaderBlock, EventBlock, FooterBlock}, computed: { ...mapState(useUsersStore, ['user', 'token']), ...mapState(useCardsStore, [\"cards\"]), EventId() { const route = useRoute(); return parseInt(route.params.id) } }, methods: { ...mapActions(useUsersStore, ['addUserEvent']), ...mapActions(useCardsStore, ['loadOneCard']), }, mounted() { this.loadOneCard(this.EventId); } } </script> ProfilePage.vue <template> <header-block/> <user-block/> <footer-block/> </template> <script> import HeaderBlock from \"@/components/Header.vue\"; import FooterBlock from \"@/components/Footer.vue\"; import UserBlock from \"@/components/Profile.vue\"; import useUsersStore from \"@/stores/users\"; import {mapActions, mapState} from \"pinia\"; export default { name: \"ProfilePage\", components: {FooterBlock, UserBlock, HeaderBlock}, computed: { ...mapState(useUsersStore, ['user', 'token', 'userEvents']), }, methods: { ...mapActions(useUsersStore, ['logout', 'CurrentUser']), } } </script> <style scoped> </style> SignInPage.vue <template> <header-block/> <signin-block/> <footer-block/> </template> <script> import HeaderBlock from \"@/components/Header.vue\"; import SigninBlock from \"@/components/Signin.vue\"; import FooterBlock from \"@/components/Footer.vue\"; import {mapActions, mapState} from \"pinia\"; import useUsersStore from \"@/stores/users\"; export default { name: \"SignInPage\", components: {HeaderBlock, SigninBlock, FooterBlock}, computed: { ...mapState(useUsersStore, ['user']) }, methods: { ...mapActions(useUsersStore, ['login']) } } </script> <style scoped> </style> SignupPage.vue <template> <header-block/> <signup-block/> <footer-block/> </template> <script> import HeaderBlock from \"@/components/Header.vue\"; import FooterBlock from \"@/components/Footer.vue\"; import SignupBlock from \"@/components/Signup.vue\"; import {mapActions, mapState} from \"pinia\"; import useUsersStore from \"@/stores/users\"; export default { name: \"SignUpPage\", components: {HeaderBlock, SignupBlock, FooterBlock}, computed: { ...mapState(useUsersStore, ['user']) }, methods: { ...mapActions(useUsersStore, ['login, signUp']) } } </script> <style scoped> </style> CalendarPage.vue <template> <header-block/> <full-calendar :options=\"{ events: userEvents, }\" /> <footer-block/> </template> <script> import HeaderBlock from \"@/components/Header.vue\"; import FullCalendar from \"@/components/FullCalendar.vue\"; import FooterBlock from \"@/components/Footer.vue\"; import useUsersStore from \"@/stores/users\"; import {mapActions, mapState} from \"pinia\"; export default { name: \"CalendarPage\", components: {FooterBlock, FullCalendar, HeaderBlock}, computed: { ...mapState(useUsersStore, ['userEvents']) }, methods: { ...mapActions(useUsersStore, ['getUserEvents']) }, mounted() { this.getUserEvents() } } </script> <style scoped> </style> \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0437 \u0441\u0430\u0439\u0442\u0430:","title":"\u041c\u0438\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Vue.JS."},{"location":"pr3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 models.py from django.db import models from django.contrib.auth.models import AbstractUser class Car(models.Model): car_id = models.IntegerField(primary_key=True) state_number = models.CharField(max_length=15, null=False) make_car = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) colour = models.CharField(max_length=30, null=True) class CarOwner(AbstractUser): owner_id = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) birthday = models.DateField(null=True) passport = models.CharField(max_length=12, null=True, blank=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=30, null=True, blank=True) cars = models.ManyToManyField(Car, through='Ownership') def __str__(self): return self.owner_id.__str__() class Ownership(models.Model): owner_car_id = models.IntegerField(primary_key=True) owner_id = models.ForeignKey(CarOwner, on_delete=models.CASCADE, related_name='owner') car_id = models.ForeignKey(Car, on_delete=models.CASCADE, related_name='car') start_date = models.DateField() expiration_date = models.DateField(null=True) def __str__(self): return \"{}_{}\".format(self.owner_id.__str__(), self.car_id.__str__()) class DriverLicense(models.Model): license_id = models.IntegerField(primary_key=True) owner_id = models.ForeignKey(CarOwner, on_delete=models.CASCADE, related_name='carOwner') license_number = models.CharField(max_length=10, null=False) type = models.CharField(max_length=10, null=False) date_of_license = models.DateField() \u0417\u0430\u0434\u0430\u0447\u0430 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> from project_first_app.models import * >>> owner1=CarOwner.objects.create(owner_id=1, last_name=\"Konik\", first_name=\"Anastasia\", birthday = \"2002-11-24\", passport = \"6424474254\", username = \"AnastasiaKonik\") >>> owner2=CarOwner.objects.create(owner_id=2, last_name=\"Nazarov\", first_name=\"Egor\", birthday = \"2001-07-09\", passport = \"6324432254\", username = \"EgorNazarov\") >>> owner3=CarOwner.objects.create(owner_id=3, last_name=\"Petrov\", first_name=\"Alexander\", birthday = \"1994-08-19\", passport = \"6228974242\", username = \"AlexanderPetrov\") >>> owner4=CarOwner.objects.create(owner_id=4, last_name=\"Ivanov\", first_name=\"Andrey\", birthday = \"1987-12-13\", passport = \"6228983241\", username = \"AndreyIvanov\") >>> owner5=CarOwner.objects.create(owner_id=5, last_name=\"Lopuhov\", first_name=\"Fedor\", birthday = \"2000-02-20\", passport = \"6118985242\", username = \"FedorLopuhov\") >>> owner6=CarOwner.objects.create(owner_id=6, last_name=\"Korneev\", first_name=\"Denis\", birthday = \"1996-08-09\", passport = \"6118124242\", username = \"DenisKorneev\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> car1=Car.objects.create(car_id=1, state_number=\"T644AA\", make_car=\"Toyota\", model_car=\"Camry\", colour=\"white\") >>> car2=Car.objects.create(car_id=2, state_number=\"H238KK\", make_car=\"Hyundai\", model_car=\"Solaris\", colour=\"yellow\") >>> car3=Car.objects.create(car_id=3, state_number=\"O111PP\", make_car=\"Tesla\", model_car=\"Model S\", colour=\"black\") >>> car4=Car.objects.create(car_id=4, state_number=\"E322XX\", make_car=\"Mazda\", model_car=\"CX 5\", colour=\"blue\") >>> car5=Car.objects.create(car_id=5, state_number=\"M563CC\", make_car=\"Volvo\", model_car=\"XC 90\", colour=\"gold\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0439: >>> license1=DriverLicense.objects.create(license_id=1, owner_id=owner1, license_number=\"6432724\", type=\"B\", date_of_license=\"2013-10-10\") >>> license2=DriverLicense.objects.create(license_id=2, owner_id=owner2, license_number=\"6432114\", type=\"B\", date_of_license=\"2017-12-14\") >>> license3=DriverLicense.objects.create(license_id=3, owner_id=owner3, license_number=\"5332114\", type=\"B\", date_of_license=\"2014-09-01\") >>> license4=DriverLicense.objects.create(license_id=4, owner_id=owner4, license_number=\"5399114\", type=\"B\", date_of_license=\"2012-12-29\") >>> license5=DriverLicense.objects.create(license_id=5, owner_id=owner5, license_number=\"7839114\", type=\"B\", date_of_license=\"2019-06-11\") >>> license6=DriverLicense.objects.create(license_id=6, owner_id=owner6, license_number=\"7839662\", type=\"B\", date_of_license=\"2021-07-30\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446-\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c: >>> Ownership(owner_car_id=1, owner_id=CarOwner.objects.get(owner_id=1), car_id=Car.objects.get(car_id=1), start_date=\"2013-10-11\", expiration_date=\"2014-08-31\").save() >>> Ownership(owner_car_id=2, owner_id=CarOwner.objects.get(owner_id=2), car_id=Car.objects.get(car_id=2), start_date=\"2017-12-15\").save() >>> Ownership(owner_car_id=3, owner_id=CarOwner.objects.get(owner_id=3), car_id=Car.objects.get(car_id=3), start_date=\"2014-09-01\", expiration_date=\"2021-07-29\").save() >>> Ownership(owner_car_id=4, owner_id=CarOwner.objects.get(owner_id=4), car_id=Car.objects.get(car_id=4), start_date=\"2012-12-30\", expiration_date=\"2021-07-29\").save() >>> Ownership(owner_car_id=5, owner_id=CarOwner.objects.get(owner_id=5), car_id=Car.objects.get(car_id=5), start_date=\"2019-06-12\").save() >>> Ownership(owner_car_id=6, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=4), start_date=\"2021-08-02\").save() >>> Ownership(owner_car_id=7, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=3), start_date=\"2021-08-01\").save() >>> Ownership(owner_car_id=8, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=1), start_date=\"2021-07-31\").save() \u0417\u0430\u0434\u0430\u0447\u0430 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d: >>> Car.objects.filter(make_car=\"Toyota\") <QuerySet [<Car: Car object (1)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u0414\u0435\u043d\u0438\u0441\u201d: >>> CarOwner.objects.filter(first_name=\"Denis\") <QuerySet [<CarOwner: 6>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438: >>> DriverLicense.objects.filter(owner_id=CarOwner.objects.get(owner=2)) <QuerySet [<DriverLicense: DriverLicense object (2)>]> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0431\u0435\u043b\u044b\u0445 \u043c\u0430\u0448\u0438\u043d: >>> CarOwner.objects.filter(owner__car_id__colour=\"white\") <QuerySet [<CarOwner: 1>, <CarOwner: 6>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2017: >>> CarOwner.objects.filter(carOwner__date_of_license__gte=\"2017-01-01\") <QuerySet [<CarOwner: 2>, <CarOwner: 5>, <CarOwner: 6>]> \u0417\u0430\u0434\u0430\u0447\u0430 3. \u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> from django.db.models import Min, Max, Avg, Count >>> DriverLicense.objects.aggregate(date_of_license=Min(\"date_of_license\")) {'date_of_license': datetime.date(2012, 12, 29)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Ownership.objects.aggregate(start_date=Max(\"start_date\")) {'start_date': datetime.date(2021, 8, 2)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Ownership.objects.values(\"owner_id\").annotate(Count(\"car_id\")) <QuerySet [{'owner_id': 1, 'car_id__count': 1}, {'owner_id': 2, 'car_id__count': 1}, {'owner_id': 3, 'car_id__count': 1}, {'owner_id': 4, 'car_id__count': 1}, {'owner_id': 5, 'car_id__count': 1}, {'owner_id': 6, 'car_id__count': 3}]> \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Car.objects.values(\"make_car\").annotate(Count(\"car_id\")) <QuerySet [{'make_car': 'Hyundai', 'car_id__count': 1}, {'make_car': 'Mazda', 'car_id__count': 1}, {'make_car': 'Tesla', 'car_id__count': 1}, {'make_car': 'Toyota', 'car_id__count': 1}, {'make_car': 'Volvo', 'car_id__count': 1}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> DriverLicense.objects.values(\"owner_id\").order_by(\"date_of_license\") <QuerySet [{'owner_id': 4}, {'owner_id': 1}, {'owner_id': 3}, {'owner_id': 2}, {'owner_id': 5}, {'owner_id': 6}]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"pr3/#no3","text":"models.py from django.db import models from django.contrib.auth.models import AbstractUser class Car(models.Model): car_id = models.IntegerField(primary_key=True) state_number = models.CharField(max_length=15, null=False) make_car = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) colour = models.CharField(max_length=30, null=True) class CarOwner(AbstractUser): owner_id = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) birthday = models.DateField(null=True) passport = models.CharField(max_length=12, null=True, blank=True) address = models.CharField(max_length=50, null=True, blank=True) nationality = models.CharField(max_length=30, null=True, blank=True) cars = models.ManyToManyField(Car, through='Ownership') def __str__(self): return self.owner_id.__str__() class Ownership(models.Model): owner_car_id = models.IntegerField(primary_key=True) owner_id = models.ForeignKey(CarOwner, on_delete=models.CASCADE, related_name='owner') car_id = models.ForeignKey(Car, on_delete=models.CASCADE, related_name='car') start_date = models.DateField() expiration_date = models.DateField(null=True) def __str__(self): return \"{}_{}\".format(self.owner_id.__str__(), self.car_id.__str__()) class DriverLicense(models.Model): license_id = models.IntegerField(primary_key=True) owner_id = models.ForeignKey(CarOwner, on_delete=models.CASCADE, related_name='carOwner') license_number = models.CharField(max_length=10, null=False) type = models.CharField(max_length=10, null=False) date_of_license = models.DateField()","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"pr3/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> from project_first_app.models import * >>> owner1=CarOwner.objects.create(owner_id=1, last_name=\"Konik\", first_name=\"Anastasia\", birthday = \"2002-11-24\", passport = \"6424474254\", username = \"AnastasiaKonik\") >>> owner2=CarOwner.objects.create(owner_id=2, last_name=\"Nazarov\", first_name=\"Egor\", birthday = \"2001-07-09\", passport = \"6324432254\", username = \"EgorNazarov\") >>> owner3=CarOwner.objects.create(owner_id=3, last_name=\"Petrov\", first_name=\"Alexander\", birthday = \"1994-08-19\", passport = \"6228974242\", username = \"AlexanderPetrov\") >>> owner4=CarOwner.objects.create(owner_id=4, last_name=\"Ivanov\", first_name=\"Andrey\", birthday = \"1987-12-13\", passport = \"6228983241\", username = \"AndreyIvanov\") >>> owner5=CarOwner.objects.create(owner_id=5, last_name=\"Lopuhov\", first_name=\"Fedor\", birthday = \"2000-02-20\", passport = \"6118985242\", username = \"FedorLopuhov\") >>> owner6=CarOwner.objects.create(owner_id=6, last_name=\"Korneev\", first_name=\"Denis\", birthday = \"1996-08-09\", passport = \"6118124242\", username = \"DenisKorneev\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439: >>> car1=Car.objects.create(car_id=1, state_number=\"T644AA\", make_car=\"Toyota\", model_car=\"Camry\", colour=\"white\") >>> car2=Car.objects.create(car_id=2, state_number=\"H238KK\", make_car=\"Hyundai\", model_car=\"Solaris\", colour=\"yellow\") >>> car3=Car.objects.create(car_id=3, state_number=\"O111PP\", make_car=\"Tesla\", model_car=\"Model S\", colour=\"black\") >>> car4=Car.objects.create(car_id=4, state_number=\"E322XX\", make_car=\"Mazda\", model_car=\"CX 5\", colour=\"blue\") >>> car5=Car.objects.create(car_id=5, state_number=\"M563CC\", make_car=\"Volvo\", model_car=\"XC 90\", colour=\"gold\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0439: >>> license1=DriverLicense.objects.create(license_id=1, owner_id=owner1, license_number=\"6432724\", type=\"B\", date_of_license=\"2013-10-10\") >>> license2=DriverLicense.objects.create(license_id=2, owner_id=owner2, license_number=\"6432114\", type=\"B\", date_of_license=\"2017-12-14\") >>> license3=DriverLicense.objects.create(license_id=3, owner_id=owner3, license_number=\"5332114\", type=\"B\", date_of_license=\"2014-09-01\") >>> license4=DriverLicense.objects.create(license_id=4, owner_id=owner4, license_number=\"5399114\", type=\"B\", date_of_license=\"2012-12-29\") >>> license5=DriverLicense.objects.create(license_id=5, owner_id=owner5, license_number=\"7839114\", type=\"B\", date_of_license=\"2019-06-11\") >>> license6=DriverLicense.objects.create(license_id=6, owner_id=owner6, license_number=\"7839662\", type=\"B\", date_of_license=\"2021-07-30\") \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446-\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c: >>> Ownership(owner_car_id=1, owner_id=CarOwner.objects.get(owner_id=1), car_id=Car.objects.get(car_id=1), start_date=\"2013-10-11\", expiration_date=\"2014-08-31\").save() >>> Ownership(owner_car_id=2, owner_id=CarOwner.objects.get(owner_id=2), car_id=Car.objects.get(car_id=2), start_date=\"2017-12-15\").save() >>> Ownership(owner_car_id=3, owner_id=CarOwner.objects.get(owner_id=3), car_id=Car.objects.get(car_id=3), start_date=\"2014-09-01\", expiration_date=\"2021-07-29\").save() >>> Ownership(owner_car_id=4, owner_id=CarOwner.objects.get(owner_id=4), car_id=Car.objects.get(car_id=4), start_date=\"2012-12-30\", expiration_date=\"2021-07-29\").save() >>> Ownership(owner_car_id=5, owner_id=CarOwner.objects.get(owner_id=5), car_id=Car.objects.get(car_id=5), start_date=\"2019-06-12\").save() >>> Ownership(owner_car_id=6, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=4), start_date=\"2021-08-02\").save() >>> Ownership(owner_car_id=7, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=3), start_date=\"2021-08-01\").save() >>> Ownership(owner_car_id=8, owner_id=CarOwner.objects.get(owner_id=6), car_id=Car.objects.get(car_id=1), start_date=\"2021-07-31\").save()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"pr3/#2","text":"\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d: >>> Car.objects.filter(make_car=\"Toyota\") <QuerySet [<Car: Car object (1)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u0414\u0435\u043d\u0438\u0441\u201d: >>> CarOwner.objects.filter(first_name=\"Denis\") <QuerySet [<CarOwner: 6>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438: >>> DriverLicense.objects.filter(owner_id=CarOwner.objects.get(owner=2)) <QuerySet [<DriverLicense: DriverLicense object (2)>]> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0431\u0435\u043b\u044b\u0445 \u043c\u0430\u0448\u0438\u043d: >>> CarOwner.objects.filter(owner__car_id__colour=\"white\") <QuerySet [<CarOwner: 1>, <CarOwner: 6>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2017: >>> CarOwner.objects.filter(carOwner__date_of_license__gte=\"2017-01-01\") <QuerySet [<CarOwner: 2>, <CarOwner: 5>, <CarOwner: 6>]>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"pr3/#3","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> from django.db.models import Min, Max, Avg, Count >>> DriverLicense.objects.aggregate(date_of_license=Min(\"date_of_license\")) {'date_of_license': datetime.date(2012, 12, 29)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Ownership.objects.aggregate(start_date=Max(\"start_date\")) {'start_date': datetime.date(2021, 8, 2)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Ownership.objects.values(\"owner_id\").annotate(Count(\"car_id\")) <QuerySet [{'owner_id': 1, 'car_id__count': 1}, {'owner_id': 2, 'car_id__count': 1}, {'owner_id': 3, 'car_id__count': 1}, {'owner_id': 4, 'car_id__count': 1}, {'owner_id': 5, 'car_id__count': 1}, {'owner_id': 6, 'car_id__count': 3}]> \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Car.objects.values(\"make_car\").annotate(Count(\"car_id\")) <QuerySet [{'make_car': 'Hyundai', 'car_id__count': 1}, {'make_car': 'Mazda', 'car_id__count': 1}, {'make_car': 'Tesla', 'car_id__count': 1}, {'make_car': 'Toyota', 'car_id__count': 1}, {'make_car': 'Volvo', 'car_id__count': 1}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> DriverLicense.objects.values(\"owner_id\").order_by(\"date_of_license\") <QuerySet [{'owner_id': 4}, {'owner_id': 1}, {'owner_id': 3}, {'owner_id': 2}, {'owner_id': 5}, {'owner_id': 6}]>","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3. \u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"}]}